<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OpenTelemetry</name>
    </assembly>
    <members>
        <member name="T:OpenTelemetry.ExportResult">
            <summary>
            Enumeration used to define the result of an export operation.
            </summary>
        </member>
        <member name="F:OpenTelemetry.ExportResult.Success">
            <summary>
            Export succeeded.
            </summary>
        </member>
        <member name="F:OpenTelemetry.ExportResult.Failure">
            <summary>
            Export failed.
            </summary>
        </member>
        <member name="T:OpenTelemetry.BaseExporter`1">
            <summary>
            Exporter base class.
            </summary>
            <typeparam name="T">The type of object to be exported.</typeparam>
        </member>
        <member name="P:OpenTelemetry.BaseExporter`1.ParentProvider">
            <summary>
            Gets the parent <see cref="T:OpenTelemetry.BaseProvider"/>.
            </summary>
        </member>
        <member name="M:OpenTelemetry.BaseExporter`1.Export(OpenTelemetry.Batch{`0}@)">
            <summary>
            Exports a batch of telemetry objects.
            </summary>
            <param name="batch">Batch of telemetry objects to export.</param>
            <returns>Result of the export operation.</returns>
        </member>
        <member name="M:OpenTelemetry.BaseExporter`1.ForceFlush(System.Int32)">
            <summary>
            Flushes the exporter, blocks the current thread until flush
            completed, shutdown signaled or timed out.
            </summary>
            <param name="timeoutMilliseconds">
            The number (non-negative) of milliseconds to wait, or
            <c>Timeout.Infinite</c> to wait indefinitely.
            </param>
            <returns>
            Returns <c>true</c> when flush succeeded; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the <c>timeoutMilliseconds</c> is smaller than -1.
            </exception>
            <remarks>
            This function guarantees thread-safety.
            </remarks>
        </member>
        <member name="M:OpenTelemetry.BaseExporter`1.Shutdown(System.Int32)">
            <summary>
            Attempts to shutdown the exporter, blocks the current thread until
            shutdown completed or timed out.
            </summary>
            <param name="timeoutMilliseconds">
            The number (non-negative) of milliseconds to wait, or
            <c>Timeout.Infinite</c> to wait indefinitely.
            </param>
            <returns>
            Returns <c>true</c> when shutdown succeeded; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the <c>timeoutMilliseconds</c> is smaller than -1.
            </exception>
            <remarks>
            This function guarantees thread-safety. Only the first call will
            win, subsequent calls will be no-op.
            </remarks>
        </member>
        <member name="M:OpenTelemetry.BaseExporter`1.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.BaseExporter`1.OnForceFlush(System.Int32)">
            <summary>
            Called by <c>ForceFlush</c>. This function should block the current
            thread until flush completed, shutdown signaled or timed out.
            </summary>
            <param name="timeoutMilliseconds">
            The number (non-negative) of milliseconds to wait, or
            <c>Timeout.Infinite</c> to wait indefinitely.
            </param>
            <returns>
            Returns <c>true</c> when flush succeeded; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This function is called synchronously on the thread which called
            <c>ForceFlush</c>. This function should be thread-safe, and should
            not throw exceptions.
            </remarks>
        </member>
        <member name="M:OpenTelemetry.BaseExporter`1.OnShutdown(System.Int32)">
            <summary>
            Called by <c>Shutdown</c>. This function should block the current
            thread until shutdown completed or timed out.
            </summary>
            <param name="timeoutMilliseconds">
            The number (non-negative) of milliseconds to wait, or
            <c>Timeout.Infinite</c> to wait indefinitely.
            </param>
            <returns>
            Returns <c>true</c> when shutdown succeeded; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This function is called synchronously on the thread which made the
            first call to <c>Shutdown</c>. This function should not throw
            exceptions.
            </remarks>
        </member>
        <member name="M:OpenTelemetry.BaseExporter`1.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by this class and optionally
            releases the managed resources.
            </summary>
            <param name="disposing">
            <see langword="true"/> to release both managed and unmanaged resources;
            <see langword="false"/> to release only unmanaged resources.
            </param>
        </member>
        <member name="T:OpenTelemetry.ExportProcessorType">
            <summary>
            Type of Export Processor to be used.
            </summary>
        </member>
        <member name="F:OpenTelemetry.ExportProcessorType.Simple">
            <summary>
            Use SimpleExportProcessor.
            Refer to the <a href="https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/sdk.md#simple-processor">
            specification</a> for more information.
            </summary>
        </member>
        <member name="F:OpenTelemetry.ExportProcessorType.Batch">
            <summary>
            Use BatchExportProcessor.
            Refer to <a href="https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/sdk.md#batching-processor">
            specification</a> for more information.
            </summary>
        </member>
        <member name="T:OpenTelemetry.BaseExportProcessor`1">
            <summary>
            Implements processor that exports telemetry objects.
            </summary>
            <typeparam name="T">The type of telemetry object to be exported.</typeparam>
        </member>
        <member name="M:OpenTelemetry.BaseExportProcessor`1.#ctor(OpenTelemetry.BaseExporter{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:OpenTelemetry.BaseExportProcessor`1"/> class.
            </summary>
            <param name="exporter">Exporter instance.</param>
        </member>
        <member name="M:OpenTelemetry.BaseExportProcessor`1.OnStart(`0)">
            <inheritdoc />
        </member>
        <member name="M:OpenTelemetry.BaseExportProcessor`1.OnForceFlush(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:OpenTelemetry.BaseExportProcessor`1.OnShutdown(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:OpenTelemetry.BaseExportProcessor`1.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:OpenTelemetry.BaseProcessor`1">
            <summary>
            Base processor base class.
            </summary>
            <typeparam name="T">The type of object to be processed.</typeparam>
        </member>
        <member name="M:OpenTelemetry.BaseProcessor`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OpenTelemetry.BaseProcessor`1"/> class.
            </summary>
        </member>
        <member name="P:OpenTelemetry.BaseProcessor`1.ParentProvider">
            <summary>
            Gets the parent <see cref="T:OpenTelemetry.BaseProvider"/>.
            </summary>
        </member>
        <member name="M:OpenTelemetry.BaseProcessor`1.OnStart(`0)">
            <summary>
            Called synchronously when a telemetry object is started.
            </summary>
            <param name="data">
            The started telemetry object.
            </param>
            <remarks>
            This function is called synchronously on the thread which started
            the telemetry object. This function should be thread-safe, and
            should not block indefinitely or throw exceptions.
            </remarks>
        </member>
        <member name="M:OpenTelemetry.BaseProcessor`1.OnEnd(`0)">
            <summary>
            Called synchronously when a telemetry object is ended.
            </summary>
            <param name="data">
            The ended telemetry object.
            </param>
            <remarks>
            This function is called synchronously on the thread which ended
            the telemetry object. This function should be thread-safe, and
            should not block indefinitely or throw exceptions.
            </remarks>
        </member>
        <member name="M:OpenTelemetry.BaseProcessor`1.ForceFlush(System.Int32)">
            <summary>
            Flushes the processor, blocks the current thread until flush
            completed, shutdown signaled or timed out.
            </summary>
            <param name="timeoutMilliseconds">
            The number (non-negative) of milliseconds to wait, or
            <c>Timeout.Infinite</c> to wait indefinitely.
            </param>
            <returns>
            Returns <c>true</c> when flush succeeded; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the <c>timeoutMilliseconds</c> is smaller than -1.
            </exception>
            <remarks>
            This function guarantees thread-safety.
            </remarks>
        </member>
        <member name="M:OpenTelemetry.BaseProcessor`1.Shutdown(System.Int32)">
            <summary>
            Attempts to shutdown the processor, blocks the current thread until
            shutdown completed or timed out.
            </summary>
            <param name="timeoutMilliseconds">
            The number (non-negative) of milliseconds to wait, or
            <c>Timeout.Infinite</c> to wait indefinitely.
            </param>
            <returns>
            Returns <c>true</c> when shutdown succeeded; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the <c>timeoutMilliseconds</c> is smaller than -1.
            </exception>
            <remarks>
            This function guarantees thread-safety. Only the first call will
            win, subsequent calls will be no-op.
            </remarks>
        </member>
        <member name="M:OpenTelemetry.BaseProcessor`1.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.BaseProcessor`1.OnForceFlush(System.Int32)">
            <summary>
            Called by <c>ForceFlush</c>. This function should block the current
            thread until flush completed, shutdown signaled or timed out.
            </summary>
            <param name="timeoutMilliseconds">
            The number (non-negative) of milliseconds to wait, or
            <c>Timeout.Infinite</c> to wait indefinitely.
            </param>
            <returns>
            Returns <c>true</c> when flush succeeded; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This function is called synchronously on the thread which called
            <c>ForceFlush</c>. This function should be thread-safe, and should
            not throw exceptions.
            </remarks>
        </member>
        <member name="M:OpenTelemetry.BaseProcessor`1.OnShutdown(System.Int32)">
            <summary>
            Called by <c>Shutdown</c>. This function should block the current
            thread until shutdown completed or timed out.
            </summary>
            <param name="timeoutMilliseconds">
            The number (non-negative) of milliseconds to wait, or
            <c>Timeout.Infinite</c> to wait indefinitely.
            </param>
            <returns>
            Returns <c>true</c> when shutdown succeeded; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This function is called synchronously on the thread which made the
            first call to <c>Shutdown</c>. This function should not throw
            exceptions.
            </remarks>
        </member>
        <member name="M:OpenTelemetry.BaseProcessor`1.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by this class and optionally
            releases the managed resources.
            </summary>
            <param name="disposing">
            <see langword="true"/> to release both managed and unmanaged resources;
            <see langword="false"/> to release only unmanaged resources.
            </param>
        </member>
        <member name="T:OpenTelemetry.Batch`1">
            <summary>
            Stores a batch of completed <typeparamref name="T"/> objects to be exported.
            </summary>
            <typeparam name="T">The type of object in the <see cref="T:OpenTelemetry.Batch`1"/>.</typeparam>
        </member>
        <member name="M:OpenTelemetry.Batch`1.#ctor(`0[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenTelemetry.Batch`1"/> struct.
            </summary>
            <param name="items">The items to store in the batch.</param>
            <param name="count">The number of items in the batch.</param>
        </member>
        <member name="P:OpenTelemetry.Batch`1.Count">
            <summary>
            Gets the count of items in the batch.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Batch`1.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.Batch`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:OpenTelemetry.Batch`1"/>.
            </summary>
            <returns><see cref="T:OpenTelemetry.Batch`1.Enumerator"/>.</returns>
        </member>
        <member name="T:OpenTelemetry.Batch`1.Enumerator">
            <summary>
            Enumerates the elements of a <see cref="T:OpenTelemetry.Batch`1"/>.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Batch`1.Enumerator.Current">
            <inheritdoc/>
        </member>
        <member name="P:OpenTelemetry.Batch`1.Enumerator.System#Collections#IEnumerator#Current">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.Batch`1.Enumerator.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.Batch`1.Enumerator.MoveNext">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.Batch`1.Enumerator.Reset">
            <inheritdoc/>
        </member>
        <member name="T:OpenTelemetry.BatchExportProcessor`1">
            <summary>
            Implements processor that batches telemetry objects before calling exporter.
            </summary>
            <typeparam name="T">The type of telemetry object to be exported.</typeparam>
        </member>
        <member name="M:OpenTelemetry.BatchExportProcessor`1.#ctor(OpenTelemetry.BaseExporter{`0},System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenTelemetry.BatchExportProcessor`1"/> class.
            </summary>
            <param name="exporter">Exporter instance.</param>
            <param name="maxQueueSize">The maximum queue size. After the size is reached data are dropped. The default value is 2048.</param>
            <param name="scheduledDelayMilliseconds">The delay interval in milliseconds between two consecutive exports. The default value is 5000.</param>
            <param name="exporterTimeoutMilliseconds">How long the export can run before it is cancelled. The default value is 30000.</param>
            <param name="maxExportBatchSize">The maximum batch size of every export. It must be smaller or equal to maxQueueSize. The default value is 512.</param>
        </member>
        <member name="P:OpenTelemetry.BatchExportProcessor`1.DroppedCount">
            <summary>
            Gets the number of telemetry objects dropped by the processor.
            </summary>
        </member>
        <member name="P:OpenTelemetry.BatchExportProcessor`1.ReceivedCount">
            <summary>
            Gets the number of telemetry objects received by the processor.
            </summary>
        </member>
        <member name="P:OpenTelemetry.BatchExportProcessor`1.ProcessedCount">
            <summary>
            Gets the number of telemetry objects processed by the underlying exporter.
            </summary>
        </member>
        <member name="M:OpenTelemetry.BatchExportProcessor`1.OnExport(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.BatchExportProcessor`1.OnForceFlush(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.BatchExportProcessor`1.OnShutdown(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.BatchExportProcessor`1.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="P:OpenTelemetry.BatchExportProcessorOptions`1.MaxQueueSize">
            <summary>
            Gets or sets the maximum queue size. The queue drops the data if the maximum size is reached. The default value is 2048.
            </summary>
        </member>
        <member name="P:OpenTelemetry.BatchExportProcessorOptions`1.ScheduledDelayMilliseconds">
            <summary>
            Gets or sets the delay interval (in milliseconds) between two consecutive exports. The default value is 5000.
            </summary>
        </member>
        <member name="P:OpenTelemetry.BatchExportProcessorOptions`1.ExporterTimeoutMilliseconds">
            <summary>
            Gets or sets the timeout (in milliseconds) after which the export is cancelled. The default value is 30000.
            </summary>
        </member>
        <member name="P:OpenTelemetry.BatchExportProcessorOptions`1.MaxExportBatchSize">
            <summary>
            Gets or sets the maximum batch size of every export. It must be smaller or equal to MaxQueueLength. The default value is 512.
            </summary>
        </member>
        <member name="M:OpenTelemetry.CompositeProcessor`1.OnEnd(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.CompositeProcessor`1.OnStart(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.CompositeProcessor`1.OnForceFlush(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.CompositeProcessor`1.OnShutdown(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.CompositeProcessor`1.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.Instrumentation.DiagnosticSourceSubscriber.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:OpenTelemetry.Instrumentation.InstrumentationEventSource">
            <summary>
            EventSource events emitted from the project.
            </summary>
        </member>
        <member name="T:OpenTelemetry.Instrumentation.ListenerHandler">
            <summary>
            ListenerHandler base class.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Instrumentation.ListenerHandler.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenTelemetry.Instrumentation.ListenerHandler"/> class.
            </summary>
            <param name="sourceName">The name of the <see cref="T:OpenTelemetry.Instrumentation.ListenerHandler"/>.</param>
        </member>
        <member name="P:OpenTelemetry.Instrumentation.ListenerHandler.SourceName">
            <summary>
            Gets the name of the <see cref="T:OpenTelemetry.Instrumentation.ListenerHandler"/>.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Instrumentation.ListenerHandler.SupportsNullActivity">
            <summary>
            Gets a value indicating whether the <see cref="T:OpenTelemetry.Instrumentation.ListenerHandler"/> supports NULL <see cref="T:System.Diagnostics.Activity"/>.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Instrumentation.ListenerHandler.OnEventWritten(System.String,System.Object)">
            <summary>
            Method called for an event which does not have 'Start', 'Stop' or 'Exception' as suffix.
            </summary>
            <param name="name">Custom name.</param>
            <param name="payload">An object that represent the value being passed as a payload for the event.</param>
        </member>
        <member name="T:OpenTelemetry.Instrumentation.PropertyFetcher`1">
            <summary>
            PropertyFetcher fetches a property from an object.
            </summary>
            <typeparam name="T">The type of the property being fetched.</typeparam>
        </member>
        <member name="M:OpenTelemetry.Instrumentation.PropertyFetcher`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenTelemetry.Instrumentation.PropertyFetcher`1"/> class.
            </summary>
            <param name="propertyName">Property name to fetch.</param>
        </member>
        <member name="M:OpenTelemetry.Instrumentation.PropertyFetcher`1.Fetch(System.Object)">
            <summary>
            Fetch the property from the object.
            </summary>
            <param name="obj">Object to be fetched.</param>
            <returns>Property fetched.</returns>
        </member>
        <member name="M:OpenTelemetry.Instrumentation.PropertyFetcher`1.TryFetch(System.Object,`0@,System.Boolean)">
            <summary>
            Try to fetch the property from the object.
            </summary>
            <param name="obj">Object to be fetched.</param>
            <param name="value">Fetched value.</param>
            <param name="skipObjNullCheck">Set this to <see langword= "true"/> if we know <paramref name="obj"/> is not <see langword= "null"/>.</param>
            <returns><see langword= "true"/> if the property was fetched.</returns>
        </member>
        <member name="T:OpenTelemetry.Internal.CircularBuffer`1">
            <summary>
            Lock-free implementation of single-reader multi-writer circular buffer.
            </summary>
            <typeparam name="T">The type of the underlying value.</typeparam>
        </member>
        <member name="M:OpenTelemetry.Internal.CircularBuffer`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenTelemetry.Internal.CircularBuffer`1"/> class.
            </summary>
            <param name="capacity">The capacity of the circular buffer, must be a positive integer.</param>
        </member>
        <member name="P:OpenTelemetry.Internal.CircularBuffer`1.Capacity">
            <summary>
            Gets the capacity of the <see cref="T:OpenTelemetry.Internal.CircularBuffer`1"/>.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Internal.CircularBuffer`1.Count">
            <summary>
            Gets the number of items contained in the <see cref="T:OpenTelemetry.Internal.CircularBuffer`1"/>.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Internal.CircularBuffer`1.AddedCount">
            <summary>
            Gets the number of items added to the <see cref="T:OpenTelemetry.Internal.CircularBuffer`1"/>.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Internal.CircularBuffer`1.RemovedCount">
            <summary>
            Gets the number of items removed from the <see cref="T:OpenTelemetry.Internal.CircularBuffer`1"/>.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Internal.CircularBuffer`1.Add(`0)">
            <summary>
            Adds the specified item to the buffer.
            </summary>
            <param name="value">The value to add.</param>
            <returns>
            Returns <c>true</c> if the item was added to the buffer successfully;
            <c>false</c> if the buffer is full.
            </returns>
        </member>
        <member name="M:OpenTelemetry.Internal.CircularBuffer`1.TryAdd(`0,System.Int32)">
            <summary>
            Attempts to add the specified item to the buffer.
            </summary>
            <param name="value">The value to add.</param>
            <param name="maxSpinCount">The maximum allowed spin count, when set to a negative number or zero, will spin indefinitely.</param>
            <returns>
            Returns <c>true</c> if the item was added to the buffer successfully;
            <c>false</c> if the buffer is full or the spin count exceeded <paramref name="maxSpinCount"/>.
            </returns>
        </member>
        <member name="M:OpenTelemetry.Internal.CircularBuffer`1.Read">
            <summary>
            Reads an item from the <see cref="T:OpenTelemetry.Internal.CircularBuffer`1"/>.
            </summary>
            <remarks>
            This function is not reentrant-safe, only one reader is allowed at any given time.
            Warning: There is no bounds check in this method. Do not call unless you have verified Count > 0.
            </remarks>
            <returns>Item read.</returns>
        </member>
        <member name="T:OpenTelemetry.Internal.OpenTelemetrySdkEventSource">
            <summary>
            EventSource implementation for OpenTelemetry SDK implementation.
            </summary>
        </member>
        <member name="T:OpenTelemetry.Internal.SelfDiagnostics">
            <summary>
            Self diagnostics class captures the EventSource events sent by OpenTelemetry
            modules and writes them to local file for internal troubleshooting.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Internal.SelfDiagnostics.Instance">
            <summary>
            Long-living object that hold relevant resources.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Internal.SelfDiagnostics.EnsureInitialized">
            <summary>
            No member of SelfDiagnostics class is explicitly called when an EventSource class, say
            OpenTelemetryApiEventSource, is invoked to send an event.
            To trigger CLR to initialize static fields and static constructors of SelfDiagnostics,
            call EnsureInitialized method before any EventSource event is sent.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Internal.SelfDiagnostics.Dispose">
            <inheritdoc/>
        </member>
        <member name="F:OpenTelemetry.Internal.SelfDiagnosticsConfigParser.ConfigBufferSize">
            <summary>
            ConfigBufferSize is the maximum bytes of config file that will be read.
            </summary>
        </member>
        <member name="T:OpenTelemetry.Internal.SelfDiagnosticsConfigRefresher">
            <summary>
            SelfDiagnosticsConfigRefresher class checks a location for a configuration file
            and open a MemoryMappedFile of a configured size at the configured file path.
            The class provides a stream object with proper write position if the configuration
            file is present and valid. Otherwise, the stream object would be unavailable,
            nothing will be logged to any file.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Internal.SelfDiagnosticsConfigRefresher.memoryMappedFileCache">
            <summary>
            memoryMappedFileCache is a handle kept in thread-local storage as a cache to indicate whether the cached
            viewStream is created from the current m_memoryMappedFile.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Internal.SelfDiagnosticsConfigRefresher.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.Internal.SelfDiagnosticsConfigRefresher.TryGetLogStream(System.Int32,System.IO.Stream@,System.Int32@)">
            <summary>
            Try to get the log stream which is seeked to the position where the next line of log should be written.
            </summary>
            <param name="byteCount">The number of bytes that need to be written.</param>
            <param name="stream">When this method returns, contains the Stream object where `byteCount` of bytes can be written.</param>
            <param name="availableByteCount">The number of bytes that is remaining until the end of the stream.</param>
            <returns>Whether the logger should log in the stream.</returns>
        </member>
        <member name="T:OpenTelemetry.Internal.SelfDiagnosticsEventListener">
            <summary>
            SelfDiagnosticsEventListener class enables the events from OpenTelemetry event sources
            and write the events to a local file in a circular way.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Internal.SelfDiagnosticsEventListener.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.Internal.SelfDiagnosticsEventListener.EncodeInBuffer(System.String,System.Boolean,System.Byte[],System.Int32)">
            <summary>
            Encode a string into the designated position in a buffer of bytes, which will be written as log.
            If isParameter is true, wrap "{}" around the string.
            The buffer should not be filled to full, leaving at least one byte empty space to fill a '\n' later.
            If the buffer cannot hold all characters, truncate the string and replace extra content with "...".
            The buffer is not guaranteed to be filled until the last byte due to variable encoding length of UTF-8,
            in order to prioritize speed over space.
            </summary>
            <param name="str">The string to be encoded.</param>
            <param name="isParameter">Whether the string is a parameter. If true, "{}" will be wrapped around the string.</param>
            <param name="buffer">The byte array to contain the resulting sequence of bytes.</param>
            <param name="position">The position at which to start writing the resulting sequence of bytes.</param>
            <returns>The position of the buffer after the last byte of the resulting sequence.</returns>
        </member>
        <member name="M:OpenTelemetry.Internal.SelfDiagnosticsEventListener.DateTimeGetBytes(System.DateTime,System.Byte[],System.Int32)">
            <summary>
            Write the <c>datetime</c> formatted string into <c>bytes</c> byte-array starting at <c>byteIndex</c> position.
            <para>
            [DateTimeKind.Utc]
            format: yyyy - MM - dd T HH : mm : ss . fffffff Z (i.e. 2020-12-09T10:20:50.4659412Z).
            </para>
            <para>
            [DateTimeKind.Local]
            format: yyyy - MM - dd T HH : mm : ss . fffffff +|- HH : mm (i.e. 2020-12-09T10:20:50.4659412-08:00).
            </para>
            <para>
            [DateTimeKind.Unspecified]
            format: yyyy - MM - dd T HH : mm : ss . fffffff (i.e. 2020-12-09T10:20:50.4659412).
            </para>
            </summary>
            <remarks>
            The bytes array must be large enough to write 27-33 charaters from the byteIndex starting position.
            </remarks>
            <param name="datetime">DateTime.</param>
            <param name="bytes">Array of bytes to write.</param>
            <param name="byteIndex">Starting index into bytes array.</param>
            <returns>The number of bytes written.</returns>
        </member>
        <member name="M:OpenTelemetry.Internal.SelfDiagnosticsEventListener.OnEventWritten(System.Diagnostics.Tracing.EventWrittenEventArgs)">
            <summary>
            This method records the events from event sources to a local file, which is provided as a stream object by
            SelfDiagnosticsConfigRefresher class. The file size is bound to a upper limit. Once the write position
            reaches the end, it will be reset to the beginning of the file.
            </summary>
            <param name="eventData">Data of the EventSource event.</param>
        </member>
        <member name="F:OpenTelemetry.Metrics.AggregationTemporality.Cumulative">
            <summary>
            Cumulative.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Metrics.AggregationTemporality.Delta">
            <summary>
            Delta.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Metrics.AggregationType.Invalid">
            <summary>
            Invalid.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Metrics.AggregationType.LongSumIncomingDelta">
            <summary>
            Calculate SUM from incoming delta measurements.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Metrics.AggregationType.LongSumIncomingCumulative">
            <summary>
            Calculate SUM from incoming cumulative measurements.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Metrics.AggregationType.DoubleSumIncomingDelta">
            <summary>
            Calculate SUM from incoming delta measurements.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Metrics.AggregationType.DoubleSumIncomingCumulative">
            <summary>
            Calculate SUM from incoming cumulative measurements.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Metrics.AggregationType.LongGauge">
            <summary>
            Keep LastValue.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Metrics.AggregationType.DoubleGauge">
            <summary>
            Keep LastValue.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Metrics.AggregationType.HistogramWithBuckets">
            <summary>
            Histogram with sum, count, buckets.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Metrics.AggregationType.HistogramWithMinMaxBuckets">
            <summary>
            Histogram with sum, count, min, max, buckets.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Metrics.AggregationType.Histogram">
            <summary>
            Histogram with sum, count.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Metrics.AggregationType.HistogramWithMinMax">
            <summary>
            Histogram with sum, count, min, max.
            </summary>
        </member>
        <member name="T:OpenTelemetry.Metrics.BaseExportingMetricReader">
            <summary>
            MetricReader implementation which exports metrics to the configured
            MetricExporter upon <see cref="M:OpenTelemetry.Metrics.MetricReader.Collect(System.Int32)"/>.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Metrics.BaseExportingMetricReader.#ctor(OpenTelemetry.BaseExporter{OpenTelemetry.Metrics.Metric})">
            <summary>
            Initializes a new instance of the <see cref="T:OpenTelemetry.Metrics.BaseExportingMetricReader"/> class.
            </summary>
            <param name="exporter">Exporter instance to export Metrics to.</param>
        </member>
        <member name="M:OpenTelemetry.Metrics.BaseExportingMetricReader.ProcessMetrics(OpenTelemetry.Batch{OpenTelemetry.Metrics.Metric}@,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.Metrics.BaseExportingMetricReader.OnCollect(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:OpenTelemetry.Metrics.BaseExportingMetricReader.OnShutdown(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:OpenTelemetry.Metrics.BaseExportingMetricReader.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:OpenTelemetry.Metrics.MeterProviderBuilderBase">
            <summary>
            Contains methods for building <see cref="T:OpenTelemetry.Metrics.MeterProvider"/> instances.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Metrics.MeterProviderBuilderBase.OpenTelemetry#Metrics#IMeterProviderBuilder#Provider">
            <inheritdoc />
        </member>
        <member name="M:OpenTelemetry.Metrics.MeterProviderBuilderBase.AddInstrumentation``1(System.Func{``0})">
            <inheritdoc />
        </member>
        <member name="M:OpenTelemetry.Metrics.MeterProviderBuilderBase.AddMeter(System.String[])">
            <inheritdoc />
        </member>
        <member name="M:OpenTelemetry.Metrics.MeterProviderBuilderBase.OpenTelemetry#Metrics#IMeterProviderBuilder#ConfigureServices(System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection})">
            <inheritdoc />
        </member>
        <member name="M:OpenTelemetry.Metrics.MeterProviderBuilderBase.OpenTelemetry#Metrics#IMeterProviderBuilder#ConfigureBuilder(System.Action{System.IServiceProvider,OpenTelemetry.Metrics.MeterProviderBuilder})">
            <inheritdoc />
        </member>
        <member name="M:OpenTelemetry.Metrics.MeterProviderBuilderBase.OpenTelemetry#Metrics#IDeferredMeterProviderBuilder#Configure(System.Action{System.IServiceProvider,OpenTelemetry.Metrics.MeterProviderBuilder})">
            <inheritdoc />
        </member>
        <member name="M:OpenTelemetry.Metrics.MeterProviderBuilderBase.Build">
            <summary>
            Run the configured actions to initialize the <see cref="T:OpenTelemetry.Metrics.MeterProvider"/>.
            </summary>
            <returns><see cref="T:OpenTelemetry.Metrics.MeterProvider"/>.</returns>
        </member>
        <member name="T:OpenTelemetry.Metrics.MeterProviderBuilderExtensions">
            <summary>
            Contains extension methods for the <see cref="T:OpenTelemetry.Metrics.MeterProviderBuilder"/> class.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Metrics.MeterProviderBuilderExtensions.AddReader(OpenTelemetry.Metrics.MeterProviderBuilder,OpenTelemetry.Metrics.MetricReader)">
            <summary>
            Adds a reader to the provider.
            </summary>
            <param name="meterProviderBuilder"><see cref="T:OpenTelemetry.Metrics.MeterProviderBuilder"/>.</param>
            <param name="reader"><see cref="T:OpenTelemetry.Metrics.MetricReader"/>.</param>
            <returns>The supplied <see cref="T:OpenTelemetry.Metrics.MeterProviderBuilder"/> for chaining.</returns>
        </member>
        <member name="M:OpenTelemetry.Metrics.MeterProviderBuilderExtensions.AddReader``1(OpenTelemetry.Metrics.MeterProviderBuilder)">
            <summary>
            Adds a reader to the provider.
            </summary>
            <remarks>
            Note: The type specified by <typeparamref name="T"/> will be
            registered as a singleton service into application services.
            </remarks>
            <typeparam name="T">Reader type.</typeparam>
            <param name="meterProviderBuilder"><see cref="T:OpenTelemetry.Metrics.MeterProviderBuilder"/>.</param>
            <returns>The supplied <see cref="T:OpenTelemetry.Metrics.MeterProviderBuilder"/> for chaining.</returns>
        </member>
        <member name="M:OpenTelemetry.Metrics.MeterProviderBuilderExtensions.AddView(OpenTelemetry.Metrics.MeterProviderBuilder,System.String,System.String)">
            <summary>
            Add metric view, which can be used to customize the Metrics outputted
            from the SDK. The views are applied in the order they are added.
            </summary>
            <remarks>See View specification here : https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/metrics/sdk.md#view.</remarks>
            <param name="meterProviderBuilder"><see cref="T:OpenTelemetry.Metrics.MeterProviderBuilder"/>.</param>
            <param name="instrumentName">Name of the instrument, to be used as part of Instrument selection criteria.</param>
            <param name="name">Name of the view. This will be used as name of resulting metrics stream.</param>
            <returns>The supplied <see cref="T:OpenTelemetry.Metrics.MeterProviderBuilder"/> for chaining.</returns>
        </member>
        <member name="M:OpenTelemetry.Metrics.MeterProviderBuilderExtensions.AddView(OpenTelemetry.Metrics.MeterProviderBuilder,System.String,OpenTelemetry.Metrics.MetricStreamConfiguration)">
            <summary>
            Add metric view, which can be used to customize the Metrics outputted
            from the SDK. The views are applied in the order they are added.
            </summary>
            <remarks>See View specification here : https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/metrics/sdk.md#view.</remarks>
            <param name="meterProviderBuilder"><see cref="T:OpenTelemetry.Metrics.MeterProviderBuilder"/>.</param>
            <param name="instrumentName">Name of the instrument, to be used as part of Instrument selection criteria.</param>
            <param name="metricStreamConfiguration">Aggregation configuration used to produce metrics stream.</param>
            <returns>The supplied <see cref="T:OpenTelemetry.Metrics.MeterProviderBuilder"/> for chaining.</returns>
        </member>
        <member name="M:OpenTelemetry.Metrics.MeterProviderBuilderExtensions.AddView(OpenTelemetry.Metrics.MeterProviderBuilder,System.Func{System.Diagnostics.Metrics.Instrument,OpenTelemetry.Metrics.MetricStreamConfiguration})">
            <summary>
            Add metric view, which can be used to customize the Metrics outputted
            from the SDK. The views are applied in the order they are added.
            </summary>
            <remarks>
            <list type="bullet">
            <item>Note: An invalid <see cref="T:OpenTelemetry.Metrics.MetricStreamConfiguration"/>
            returned from <paramref name="viewConfig"/> will cause the
            view to be ignored, no error will be
            thrown at runtime.</item>
            <item>See View specification here : https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/metrics/sdk.md#view.</item>
            </list>
            </remarks>
            <param name="meterProviderBuilder"><see cref="T:OpenTelemetry.Metrics.MeterProviderBuilder"/>.</param>
            <param name="viewConfig">Function to configure aggregation based on the instrument.</param>
            <returns>The supplied <see cref="T:OpenTelemetry.Metrics.MeterProviderBuilder"/> for chaining.</returns>
        </member>
        <member name="M:OpenTelemetry.Metrics.MeterProviderBuilderExtensions.SetMaxMetricStreams(OpenTelemetry.Metrics.MeterProviderBuilder,System.Int32)">
            <summary>
            Sets the maximum number of Metric streams supported by the MeterProvider.
            When no Views are configured, every instrument will result in one metric stream,
            so this control the numbers of instruments supported.
            When Views are configured, a single instrument can result in multiple metric streams,
            so this control the number of streams.
            </summary>
            <remarks>
            If an instrument is created, but disposed later, this will still be contributing to the limit.
            This may change in the future.
            </remarks>
            <param name="meterProviderBuilder"><see cref="T:OpenTelemetry.Metrics.MeterProviderBuilder"/>.</param>
            <param name="maxMetricStreams">Maximum number of metric streams allowed.</param>
            <returns>The supplied <see cref="T:OpenTelemetry.Metrics.MeterProviderBuilder"/> for chaining.</returns>
        </member>
        <member name="M:OpenTelemetry.Metrics.MeterProviderBuilderExtensions.SetMaxMetricPointsPerMetricStream(OpenTelemetry.Metrics.MeterProviderBuilder,System.Int32)">
            <summary>
            Sets the maximum number of MetricPoints allowed per metric stream.
            This limits the number of unique combinations of key/value pairs used
            for reporting measurements.
            </summary>
            <remarks>
            If a particular key/value pair combination is used at least once,
            it will contribute to the limit for the life of the process.
            This may change in the future. See: https://github.com/open-telemetry/opentelemetry-dotnet/issues/2360.
            </remarks>
            <param name="meterProviderBuilder"><see cref="T:OpenTelemetry.Metrics.MeterProviderBuilder"/>.</param>
            <param name="maxMetricPointsPerMetricStream">Maximum maximum number of metric points allowed per metric stream.</param>
            <returns>The supplied <see cref="T:OpenTelemetry.Metrics.MeterProviderBuilder"/> for chaining.</returns>
        </member>
        <member name="M:OpenTelemetry.Metrics.MeterProviderBuilderExtensions.SetResourceBuilder(OpenTelemetry.Metrics.MeterProviderBuilder,OpenTelemetry.Resources.ResourceBuilder)">
            <summary>
            Sets the <see cref="T:OpenTelemetry.Resources.ResourceBuilder"/> from which the Resource associated with
            this provider is built from. Overwrites currently set ResourceBuilder.
            You should usually use <see cref="M:OpenTelemetry.Metrics.MeterProviderBuilderExtensions.ConfigureResource(OpenTelemetry.Metrics.MeterProviderBuilder,System.Action{OpenTelemetry.Resources.ResourceBuilder})"/> instead
            (call <see cref="M:OpenTelemetry.Resources.ResourceBuilder.Clear"/> if desired).
            </summary>
            <param name="meterProviderBuilder"><see cref="T:OpenTelemetry.Metrics.MeterProviderBuilder"/>.</param>
            <param name="resourceBuilder"><see cref="T:OpenTelemetry.Resources.ResourceBuilder"/> from which Resource will be built.</param>
            <returns>The supplied <see cref="T:OpenTelemetry.Metrics.MeterProviderBuilder"/> for chaining.</returns>
        </member>
        <member name="M:OpenTelemetry.Metrics.MeterProviderBuilderExtensions.ConfigureResource(OpenTelemetry.Metrics.MeterProviderBuilder,System.Action{OpenTelemetry.Resources.ResourceBuilder})">
            <summary>
            Modify the <see cref="T:OpenTelemetry.Resources.ResourceBuilder"/> from which the Resource associated with
            this provider is built from in-place.
            </summary>
            <param name="meterProviderBuilder"><see cref="T:OpenTelemetry.Metrics.MeterProviderBuilder"/>.</param>
            <param name="configure">An action which modifies the provided <see cref="T:OpenTelemetry.Resources.ResourceBuilder"/> in-place.</param>
            <returns>The supplied <see cref="T:OpenTelemetry.Metrics.MeterProviderBuilder"/> for chaining.</returns>
        </member>
        <member name="M:OpenTelemetry.Metrics.MeterProviderBuilderExtensions.Build(OpenTelemetry.Metrics.MeterProviderBuilder)">
            <summary>
            Run the given actions to initialize the <see cref="T:OpenTelemetry.Metrics.MeterProvider"/>.
            </summary>
            <param name="meterProviderBuilder"><see cref="T:OpenTelemetry.Metrics.MeterProviderBuilder"/>.</param>
            <returns><see cref="T:OpenTelemetry.Metrics.MeterProvider"/>.</returns>
        </member>
        <member name="T:OpenTelemetry.Metrics.MeterProviderBuilderSdk">
            <summary>
            Stores state used to build a <see cref="T:OpenTelemetry.Metrics.MeterProvider"/>.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Metrics.MeterProviderBuilderSdk.IsValidInstrumentName(System.String)">
            <summary>
            Returns whether the given instrument name is valid according to the specification.
            </summary>
            <remarks>See specification: <see href="https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/metrics/api.md#instrument"/>.</remarks>
            <param name="instrumentName">The instrument name.</param>
            <returns>Boolean indicating if the instrument is valid.</returns>
        </member>
        <member name="M:OpenTelemetry.Metrics.MeterProviderBuilderSdk.IsValidViewName(System.String)">
            <summary>
            Returns whether the given custom view name is valid according to the specification.
            </summary>
            <remarks>See specification: <see href="https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/metrics/api.md#instrument"/>.</remarks>
            <param name="customViewName">The view name.</param>
            <returns>Boolean indicating if the instrument is valid.</returns>
        </member>
        <member name="T:OpenTelemetry.Metrics.CircularBufferBuckets">
            <summary>
            A histogram buckets implementation based on circular buffer.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Metrics.CircularBufferBuckets.Capacity">
            <summary>
            Gets the capacity of the <see cref="T:OpenTelemetry.Metrics.CircularBufferBuckets"/>.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Metrics.CircularBufferBuckets.Offset">
            <summary>
            Gets the offset of the start index for the <see cref="T:OpenTelemetry.Metrics.CircularBufferBuckets"/>.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Metrics.CircularBufferBuckets.Size">
            <summary>
            Gets the size of the <see cref="T:OpenTelemetry.Metrics.CircularBufferBuckets"/>.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Metrics.CircularBufferBuckets.Item(System.Int32)">
            <summary>
            Returns the value of <c>Bucket[index]</c>.
            </summary>
            <param name="index">The index of the bucket.</param>
            <remarks>
            The "index" value can be positive, zero or negative.
            This method does not validate if "index" falls into [begin, end],
            the caller is responsible for the validation.
            </remarks>
        </member>
        <member name="M:OpenTelemetry.Metrics.CircularBufferBuckets.TryIncrement(System.Int32,System.Int64)">
            <summary>
            Attempts to increment the value of <c>Bucket[index]</c> by <c>value</c>.
            </summary>
            <param name="index">The index of the bucket.</param>
            <param name="value">The increment.</param>
            <returns>
            Returns <c>0</c> if the increment attempt succeeded;
            Returns a positive integer indicating the minimum scale reduction level
            if the increment attempt failed.
            </returns>
            <remarks>
            The "index" value can be positive, zero or negative.
            </remarks>
        </member>
        <member name="T:OpenTelemetry.Metrics.CompositeMetricReader">
            <summary>
            CompositeMetricReader that does not deal with adding metrics and recording measurements.
            </summary>
            <summary>
            CompositeMetricReader that deals with adding metrics and recording measurements.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Metrics.CompositeMetricReader.ProcessMetrics(OpenTelemetry.Batch{OpenTelemetry.Metrics.Metric}@,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.Metrics.CompositeMetricReader.OnCollect(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.Metrics.CompositeMetricReader.OnShutdown(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:OpenTelemetry.Metrics.ExplicitBucketHistogramConfiguration">
            <summary>
            Stores configuration for a histogram metric stream with explicit bucket boundaries.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Metrics.ExplicitBucketHistogramConfiguration.Boundaries">
            <summary>
            Gets or sets the optional boundaries of the histogram metric stream.
            </summary>
            <remarks>
            Requirements:
            <list type="bullet">
            <item>The array must be in ascending order with distinct
            values.</item>
            <item>An empty array would result in no histogram buckets being
            calculated.</item>
            <item>A null value would result in default bucket boundaries being
            used.</item>
            </list>
            Note: A copy is made of the provided array.
            </remarks>
        </member>
        <member name="T:OpenTelemetry.Metrics.ExponentialBucketHistogram">
            <summary>
            Represents an exponential bucket histogram with base = 2 ^ (2 ^ (-scale)).
            An exponential bucket histogram has infinite number of buckets, which are
            identified by <c>Bucket[index] = ( base ^ index, base ^ (index + 1) ]</c>,
            where <c>index</c> is an integer.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Metrics.ExponentialBucketHistogram.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenTelemetry.Metrics.ExponentialBucketHistogram"/> class.
            </summary>
            <param name="maxBuckets">
            The maximum number of buckets in each of the positive and negative ranges, not counting the special zero bucket. The default value is 160.
            </param>
        </member>
        <member name="M:OpenTelemetry.Metrics.ExponentialBucketHistogram.MapToIndex(System.Double)">
            <summary>
            Maps a finite positive IEEE 754 double-precision floating-point
            number to <c>Bucket[index] = ( base ^ index, base ^ (index + 1) ]</c>,
            where <c>index</c> is an integer.
            </summary>
            <param name="value">
            The value to be bucketized. Must be a finite positive number.
            </param>
            <returns>
            Returns the index of the bucket.
            </returns>
        </member>
        <member name="T:OpenTelemetry.Metrics.ExponentialBucketHistogramConfiguration">
            <summary>
            Stores configuration for a histogram metric stream with exponential bucket boundaries.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Metrics.ExponentialBucketHistogramConfiguration.MaxSize">
            <summary>
            Gets or sets the maximum number of buckets in each of the positive and negative ranges, not counting the special zero bucket.
            </summary>
            <remarks>
            The default value is 160.
            </remarks>
        </member>
        <member name="F:OpenTelemetry.Metrics.ExportModes.Push">
            <summary>
            Push.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Metrics.ExportModes.Pull">
            <summary>
            Pull.
            </summary>
        </member>
        <member name="T:OpenTelemetry.Metrics.HistogramBucket">
            <summary>
            Represents a bucket in the histogram metric type.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Metrics.HistogramBucket.ExplicitBound">
            <summary>
            Gets the configured bounds for the bucket or <see
            cref="F:System.Double.PositiveInfinity"/> for the catch-all bucket.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Metrics.HistogramBucket.BucketCount">
            <summary>
            Gets the count of items in the bucket.
            </summary>
        </member>
        <member name="T:OpenTelemetry.Metrics.HistogramBuckets">
            <summary>
            A collection of <see cref="T:OpenTelemetry.Metrics.HistogramBucket"/>s associated with a histogram metric type.
            </summary>
        </member>
        <member name="T:OpenTelemetry.Metrics.HistogramBuckets.Enumerator">
            <summary>
            Enumerates the elements of a <see cref="T:OpenTelemetry.Metrics.HistogramBuckets"/>.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Metrics.HistogramBuckets.Enumerator.Current">
            <summary>
            Gets the <see cref="T:OpenTelemetry.Metrics.HistogramBucket"/> at the current position of the enumerator.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Metrics.HistogramBuckets.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the <see
            cref="T:OpenTelemetry.Metrics.HistogramBuckets"/>.
            </summary>
            <returns><see langword="true"/> if the enumerator was
            successfully advanced to the next element; <see
            langword="false"/> if the enumerator has passed the end of the
            collection.</returns>
        </member>
        <member name="P:OpenTelemetry.Metrics.HistogramConfiguration.RecordMinMax">
            <summary>
            Gets or sets a value indicating whether Min, Max
            should be collected.
            </summary>
        </member>
        <member name="T:OpenTelemetry.Metrics.IPullMetricExporter">
            <summary>
            Describes a type of <see cref="T:OpenTelemetry.BaseExporter`1"/> which supports <see cref="F:OpenTelemetry.Metrics.ExportModes.Pull"/>.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Metrics.MeterProviderExtensions.ForceFlush(OpenTelemetry.Metrics.MeterProvider,System.Int32)">
            <summary>
            Flushes all the readers registered under MeterProviderSdk, blocks the current thread
            until flush completed, shutdown signaled or timed out.
            </summary>
            <param name="provider">MeterProviderSdk instance on which ForceFlush will be called.</param>
            <param name="timeoutMilliseconds">
            The number (non-negative) of milliseconds to wait, or
            <c>Timeout.Infinite</c> to wait indefinitely.
            </param>
            <returns>
            Returns <c>true</c> when force flush succeeded; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the <c>timeoutMilliseconds</c> is smaller than -1.
            </exception>
            <remarks>
            This function guarantees thread-safety.
            </remarks>
        </member>
        <member name="M:OpenTelemetry.Metrics.MeterProviderExtensions.Shutdown(OpenTelemetry.Metrics.MeterProvider,System.Int32)">
            <summary>
            Attempts to shutdown the MeterProviderSdk, blocks the current thread until
            shutdown completed or timed out.
            </summary>
            <param name="provider">MeterProviderSdk instance on which Shutdown will be called.</param>
            <param name="timeoutMilliseconds">
            The number (non-negative) of milliseconds to wait, or
            <c>Timeout.Infinite</c> to wait indefinitely.
            </param>
            <returns>
            Returns <c>true</c> when shutdown succeeded; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the <c>timeoutMilliseconds</c> is smaller than -1.
            </exception>
            <remarks>
            This function guarantees thread-safety. Only the first call will
            win, subsequent calls will be no-op.
            </remarks>
        </member>
        <member name="M:OpenTelemetry.Metrics.MeterProviderExtensions.TryFindExporter``1(OpenTelemetry.Metrics.MeterProvider,``0@)">
            <summary>
            Finds the Metric exporter of the given type from the provider.
            </summary>
            <typeparam name="T">The type of the Exporter.</typeparam>
            <param name="provider">The MeterProvider from which Exporter should be found.</param>
            <param name="exporter">The exporter instance.</param>
            <returns>true if the exporter of specified Type is found; otherwise false.</returns>
        </member>
        <member name="M:OpenTelemetry.Metrics.MeterProviderSdk.OnForceFlush(System.Int32)">
            <summary>
            Called by <c>ForceFlush</c>. This function should block the current
            thread until flush completed or timed out.
            </summary>
            <param name="timeoutMilliseconds">
            The number (non-negative) of milliseconds to wait, or
            <c>Timeout.Infinite</c> to wait indefinitely.
            </param>
            <returns>
            Returns <c>true</c> when flush succeeded; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This function is called synchronously on the thread which made the
            first call to <c>ForceFlush</c>. This function should not throw
            exceptions.
            </remarks>
        </member>
        <member name="M:OpenTelemetry.Metrics.MeterProviderSdk.OnShutdown(System.Int32)">
            <summary>
            Called by <c>Shutdown</c>. This function should block the current
            thread until shutdown completed or timed out.
            </summary>
            <param name="timeoutMilliseconds">
            The number (non-negative) of milliseconds to wait, or
            <c>Timeout.Infinite</c> to wait indefinitely.
            </param>
            <returns>
            Returns <c>true</c> when shutdown succeeded; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This function is called synchronously on the thread which made the
            first call to <c>Shutdown</c>. This function should not throw
            exceptions.
            </remarks>
        </member>
        <member name="T:OpenTelemetry.Metrics.Metric">
            <summary>
            Represents a Metric stream which can contain multiple MetricPoints.
            </summary>
        </member>
        <member name="T:OpenTelemetry.Metrics.MetricPoint">
            <summary>
            Represents a metric data point.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Metrics.MetricPoint.Tags">
            <summary>
            Gets the tags associated with the metric point.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Metrics.MetricPoint.StartTime">
            <summary>
            Gets the start time associated with the metric point.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Metrics.MetricPoint.EndTime">
            <summary>
            Gets the end time associated with the metric point.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Metrics.MetricPoint.GetSumLong">
            <summary>
            Gets the sum long value associated with the metric point.
            </summary>
            <remarks>
            Applies to <see cref="F:OpenTelemetry.Metrics.MetricType.LongSum"/> metric type.
            </remarks>
            <returns>Long sum value.</returns>
        </member>
        <member name="M:OpenTelemetry.Metrics.MetricPoint.GetSumDouble">
            <summary>
            Gets the sum double value associated with the metric point.
            </summary>
            <remarks>
            Applies to <see cref="F:OpenTelemetry.Metrics.MetricType.DoubleSum"/> metric type.
            </remarks>
            <returns>Double sum value.</returns>
        </member>
        <member name="M:OpenTelemetry.Metrics.MetricPoint.GetGaugeLastValueLong">
            <summary>
            Gets the last long value of the gauge associated with the metric point.
            </summary>
            <remarks>
            Applies to <see cref="F:OpenTelemetry.Metrics.MetricType.LongGauge"/> metric type.
            </remarks>
            <returns>Long gauge value.</returns>
        </member>
        <member name="M:OpenTelemetry.Metrics.MetricPoint.GetGaugeLastValueDouble">
            <summary>
            Gets the last double value of the gauge associated with the metric point.
            </summary>
            <remarks>
            Applies to <see cref="F:OpenTelemetry.Metrics.MetricType.DoubleGauge"/> metric type.
            </remarks>
            <returns>Double gauge value.</returns>
        </member>
        <member name="M:OpenTelemetry.Metrics.MetricPoint.GetHistogramCount">
            <summary>
            Gets the count value of the histogram associated with the metric point.
            </summary>
            <remarks>
            Applies to <see cref="F:OpenTelemetry.Metrics.MetricType.Histogram"/> metric type.
            </remarks>
            <returns>Count value.</returns>
        </member>
        <member name="M:OpenTelemetry.Metrics.MetricPoint.GetHistogramSum">
            <summary>
            Gets the sum value of the histogram associated with the metric point.
            </summary>
            <remarks>
            Applies to <see cref="F:OpenTelemetry.Metrics.MetricType.Histogram"/> metric type.
            </remarks>
            <returns>Sum value.</returns>
        </member>
        <member name="M:OpenTelemetry.Metrics.MetricPoint.GetHistogramBuckets">
            <summary>
            Gets the buckets of the histogram associated with the metric point.
            </summary>
            <remarks>
            Applies to <see cref="F:OpenTelemetry.Metrics.MetricType.Histogram"/> metric type.
            </remarks>
            <returns><see cref="T:OpenTelemetry.Metrics.HistogramBuckets"/>.</returns>
        </member>
        <member name="M:OpenTelemetry.Metrics.MetricPoint.TryGetHistogramMinMaxValues(System.Double@,System.Double@)">
            <summary>
            Gets the Histogram Min and Max values.
            </summary>
            <param name="min"> The histogram minimum value.</param>
            <param name="max"> The histogram maximum value.</param>
            <returns>True if minimum and maximum value exist, false otherwise.</returns>
        </member>
        <member name="T:OpenTelemetry.Metrics.MetricPointsAccessor">
            <summary>
            A struct for accessing the <see cref="T:OpenTelemetry.Metrics.MetricPoint"/>s collected for a
            <see cref="T:OpenTelemetry.Metrics.Metric"/>.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Metrics.MetricPointsAccessor.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:OpenTelemetry.Metrics.MetricPointsAccessor"/>.
            </summary>
            <returns><see cref="T:OpenTelemetry.Metrics.MetricPointsAccessor.Enumerator"/>.</returns>
        </member>
        <member name="T:OpenTelemetry.Metrics.MetricPointsAccessor.Enumerator">
            <summary>
            Enumerates the elements of a <see cref="T:OpenTelemetry.Metrics.MetricPointsAccessor"/>.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Metrics.MetricPointsAccessor.Enumerator.Current">
            <summary>
            Gets the <see cref="T:OpenTelemetry.Metrics.MetricPoint"/> at the current position of the enumerator.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Metrics.MetricPointsAccessor.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the <see
            cref="T:OpenTelemetry.Metrics.MetricPointsAccessor"/>.
            </summary>
            <returns><see langword="true"/> if the enumerator was
            successfully advanced to the next element; <see
            langword="false"/> if the enumerator has passed the end of the
            collection.</returns>
        </member>
        <member name="F:OpenTelemetry.Metrics.MetricPointStatus.NoCollectPending">
            <summary>
            This status is applied to <see cref="T:OpenTelemetry.Metrics.MetricPoint"/>s with status <see cref="F:OpenTelemetry.Metrics.MetricPointStatus.CollectPending"/> after a Collect.
            If an update occurs, status will be moved to <see cref="F:OpenTelemetry.Metrics.MetricPointStatus.CollectPending"/>.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Metrics.MetricPointStatus.CollectPending">
            <summary>
            The <see cref="T:OpenTelemetry.Metrics.MetricPoint"/> has been updated since the previous Collect cycle.
            Collect will move it to <see cref="F:OpenTelemetry.Metrics.MetricPointStatus.NoCollectPending"/>.
            </summary>
        </member>
        <member name="T:OpenTelemetry.Metrics.MetricReader">
            <summary>
            MetricReader base class.
            </summary>
            <summary>
            MetricReader base class.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Metrics.MetricReader.Collect(System.Int32)">
            <summary>
            Attempts to collect the metrics, blocks the current thread until
            metrics collection completed, shutdown signaled or timed out.
            If there are asynchronous instruments involved, their callback
            functions will be triggered.
            </summary>
            <param name="timeoutMilliseconds">
            The number (non-negative) of milliseconds to wait, or
            <c>Timeout.Infinite</c> to wait indefinitely.
            </param>
            <returns>
            Returns <c>true</c> when metrics collection succeeded; otherwise,
            <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the <c>timeoutMilliseconds</c> is smaller than -1.
            </exception>
            <remarks>
            This function guarantees thread-safety. If multiple calls occurred
            simultaneously, they might get folded and result in less calls to
            the <c>OnCollect</c> callback for improved performance, as long as
            the semantic can be preserved.
            </remarks>
        </member>
        <member name="M:OpenTelemetry.Metrics.MetricReader.Shutdown(System.Int32)">
            <summary>
            Attempts to shutdown the processor, blocks the current thread until
            shutdown completed or timed out.
            </summary>
            <param name="timeoutMilliseconds">
            The number (non-negative) of milliseconds to wait, or
            <c>Timeout.Infinite</c> to wait indefinitely.
            </param>
            <returns>
            Returns <c>true</c> when shutdown succeeded; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the <c>timeoutMilliseconds</c> is smaller than -1.
            </exception>
            <remarks>
            This function guarantees thread-safety. Only the first call will
            win, subsequent calls will be no-op.
            </remarks>
        </member>
        <member name="M:OpenTelemetry.Metrics.MetricReader.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.Metrics.MetricReader.ProcessMetrics(OpenTelemetry.Batch{OpenTelemetry.Metrics.Metric}@,System.Int32)">
            <summary>
            Processes a batch of metrics.
            </summary>
            <param name="metrics">Batch of metrics to be processed.</param>
            <param name="timeoutMilliseconds">
            The number (non-negative) of milliseconds to wait, or
            <c>Timeout.Infinite</c> to wait indefinitely.
            </param>
            <returns>
            Returns <c>true</c> when metrics processing succeeded; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="M:OpenTelemetry.Metrics.MetricReader.OnCollect(System.Int32)">
            <summary>
            Called by <c>Collect</c>. This function should block the current
            thread until metrics collection completed, shutdown signaled or
            timed out.
            </summary>
            <param name="timeoutMilliseconds">
            The number (non-negative) of milliseconds to wait, or
            <c>Timeout.Infinite</c> to wait indefinitely.
            </param>
            <returns>
            Returns <c>true</c> when metrics collection succeeded; otherwise,
            <c>false</c>.
            </returns>
            <remarks>
            This function is called synchronously on the threads which called
            <c>Collect</c>. This function should not throw exceptions.
            </remarks>
        </member>
        <member name="M:OpenTelemetry.Metrics.MetricReader.OnShutdown(System.Int32)">
            <summary>
            Called by <c>Shutdown</c>. This function should block the current
            thread until shutdown completed or timed out.
            </summary>
            <param name="timeoutMilliseconds">
            The number (non-negative) of milliseconds to wait, or
            <c>Timeout.Infinite</c> to wait indefinitely.
            </param>
            <returns>
            Returns <c>true</c> when shutdown succeeded; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This function is called synchronously on the thread which made the
            first call to <c>Shutdown</c>. This function should not throw
            exceptions.
            </remarks>
        </member>
        <member name="M:OpenTelemetry.Metrics.MetricReader.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by this class and optionally
            releases the managed resources.
            </summary>
            <param name="disposing">
            <see langword="true"/> to release both managed and unmanaged resources;
            <see langword="false"/> to release only unmanaged resources.
            </param>
        </member>
        <member name="T:OpenTelemetry.Metrics.MetricReaderOptions">
            <summary>
            Options for configuring either a <see cref="T:OpenTelemetry.Metrics.BaseExportingMetricReader"/> or <see cref="T:OpenTelemetry.Metrics.PeriodicExportingMetricReader"/> .
            </summary>
        </member>
        <member name="M:OpenTelemetry.Metrics.MetricReaderOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OpenTelemetry.Metrics.MetricReaderOptions"/> class.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Metrics.MetricReaderOptions.TemporalityPreference">
            <summary>
            Gets or sets the <see cref="T:OpenTelemetry.Metrics.MetricReaderTemporalityPreference" />.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Metrics.MetricReaderOptions.PeriodicExportingMetricReaderOptions">
            <summary>
            Gets or sets the <see cref="T:OpenTelemetry.Metrics.PeriodicExportingMetricReaderOptions" />.
            </summary>
        </member>
        <member name="T:OpenTelemetry.Metrics.MetricReaderTemporalityPreference">
            <summary>
            Defines the behavior of a <see cref="T:OpenTelemetry.Metrics.MetricReader" />
            with respect to <see cref="T:OpenTelemetry.Metrics.AggregationTemporality" />.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Metrics.MetricReaderTemporalityPreference.Cumulative">
            <summary>
            All aggregations are performed using cumulative temporality.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Metrics.MetricReaderTemporalityPreference.Delta">
            <summary>
            All measurements that are monotonic in nature are aggregated using delta temporality.
            Aggregations of non-monotonic measurements use cumulative temporality.
            </summary>
        </member>
        <member name="T:OpenTelemetry.Metrics.MetricStreamConfiguration">
            <summary>
            Stores configuration for a MetricStream.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Metrics.MetricStreamConfiguration.Drop">
            <summary>
            Gets the drop configuration.
            </summary>
            <remarks>
            Note: All metrics for the given instrument will be dropped (not
            collected).
            </remarks>
        </member>
        <member name="P:OpenTelemetry.Metrics.MetricStreamConfiguration.Name">
            <summary>
            Gets or sets the optional name of the metric stream.
            </summary>
            <remarks>
            Note: If not provided the instrument name will be used.
            </remarks>
        </member>
        <member name="P:OpenTelemetry.Metrics.MetricStreamConfiguration.Description">
            <summary>
            Gets or sets the optional description of the metric stream.
            </summary>
            <remarks>
            Note: If not provided the instrument description will be used.
            </remarks>
        </member>
        <member name="P:OpenTelemetry.Metrics.MetricStreamConfiguration.TagKeys">
            <summary>
            Gets or sets the optional tag keys to include in the metric stream.
            </summary>
            <remarks>
            Notes:
            <list type="bullet">
            <item>If not provided, all the tags provided by the instrument
            while reporting measurements will be used for aggregation.
            If provided, only those tags in this list will be used
            for aggregation. Providing an empty array will result
            in a metric stream without any tags.
            </item>
            <item>A copy is made of the provided array.</item>
            </list>
            </remarks>
        </member>
        <member name="F:OpenTelemetry.Metrics.MetricType.LongSum">
            <summary>
            Sum of Long type.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Metrics.MetricType.DoubleSum">
            <summary>
            Sum of Double type.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Metrics.MetricType.LongGauge">
            <summary>
            Gauge of Long type.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Metrics.MetricType.DoubleGauge">
            <summary>
            Gauge of Double type.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Metrics.MetricType.Histogram">
            <summary>
            Histogram.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Metrics.MetricType.LongSumNonMonotonic">
            <summary>
            Non-monotonic Sum of Long type.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Metrics.MetricType.DoubleSumNonMonotonic">
            <summary>
            Non-monotonic Sum of Double type.
            </summary>
        </member>
        <member name="T:OpenTelemetry.Metrics.PeriodicExportingMetricReader">
            <summary>
            MetricReader implementation which collects metrics based on
            a user-configurable time interval and passes the metrics to
            the configured MetricExporter.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Metrics.PeriodicExportingMetricReader.#ctor(OpenTelemetry.BaseExporter{OpenTelemetry.Metrics.Metric},System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenTelemetry.Metrics.PeriodicExportingMetricReader"/> class.
            </summary>
            <param name="exporter">Exporter instance to export Metrics to.</param>
            <param name="exportIntervalMilliseconds">The interval in milliseconds between two consecutive exports. The default value is 60000.</param>
            <param name="exportTimeoutMilliseconds">How long the export can run before it is cancelled. The default value is 30000.</param>
        </member>
        <member name="M:OpenTelemetry.Metrics.PeriodicExportingMetricReader.OnShutdown(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:OpenTelemetry.Metrics.PeriodicExportingMetricReader.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.Metrics.PeriodicExportingMetricReaderOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OpenTelemetry.Metrics.PeriodicExportingMetricReaderOptions"/> class.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Metrics.PeriodicExportingMetricReaderOptions.ExportIntervalMilliseconds">
            <summary>
            Gets or sets the metric export interval in milliseconds.
            If not set, the default value depends on the type of metric exporter
            associated with the metric reader.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Metrics.PeriodicExportingMetricReaderOptions.ExportTimeoutMilliseconds">
            <summary>
            Gets or sets the metric export timeout in milliseconds.
            If not set, the default value depends on the type of metric exporter
            associated with the metric reader.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Metrics.PullMetricScope.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:OpenTelemetry.Resources.IResourceDetector">
            <summary>
            An interface for Resource detectors.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Resources.IResourceDetector.Detect">
            <summary>
            Called to get a resource with attributes from detector.
            </summary>
            <returns>An instance of <see cref="T:OpenTelemetry.Resources.Resource"/>.</returns>
        </member>
        <member name="T:OpenTelemetry.Resources.Resource">
            <summary>
            <see cref="T:OpenTelemetry.Resources.Resource"/> represents a resource, which captures identifying information about the entities
            for which telemetry is reported.
            Use <see cref="T:OpenTelemetry.Resources.ResourceBuilder"/> to construct resource instances.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Resources.Resource.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Initializes a new instance of the <see cref="T:OpenTelemetry.Resources.Resource"/> class.
            </summary>
            <param name="attributes">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of attributes that describe the resource.</param>
        </member>
        <member name="P:OpenTelemetry.Resources.Resource.Empty">
            <summary>
            Gets an empty Resource.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Resources.Resource.Attributes">
            <summary>
            Gets the collection of key-value pairs describing the resource.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Resources.Resource.Merge(OpenTelemetry.Resources.Resource)">
            <summary>
            Returns a new, merged <see cref="T:OpenTelemetry.Resources.Resource"/> by merging the old <see cref="T:OpenTelemetry.Resources.Resource"/> with the
            <c>other</c> <see cref="T:OpenTelemetry.Resources.Resource"/>. In case of a collision the other <see cref="T:OpenTelemetry.Resources.Resource"/> takes precedence.
            </summary>
            <param name="other">The <see cref="T:OpenTelemetry.Resources.Resource"/> that will be merged with <c>this</c>.</param>
            <returns><see cref="T:OpenTelemetry.Resources.Resource"/>.</returns>
        </member>
        <member name="T:OpenTelemetry.Resources.ResourceBuilder">
            <summary>
            Contains methods for building <see cref="T:OpenTelemetry.Resources.Resource"/> instances.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Resources.ResourceBuilder.CreateDefault">
            <summary>
            Creates a <see cref="T:OpenTelemetry.Resources.ResourceBuilder"/> instance with Default
            service.name added. See <a
            href="https://github.com/open-telemetry/opentelemetry-specification/tree/main/specification/resource/semantic_conventions#semantic-attributes-with-sdk-provided-default-value">resource
            semantic conventions</a> for details.
            Additionally it adds resource attributes parsed from OTEL_RESOURCE_ATTRIBUTES, OTEL_SERVICE_NAME environment variables
            to a <see cref="T:OpenTelemetry.Resources.ResourceBuilder"/> following the <a
            href="https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/resource/sdk.md#specifying-resource-information-via-an-environment-variable">Resource
            SDK</a>.
            </summary>
            <returns>Created <see cref="T:OpenTelemetry.Resources.ResourceBuilder"/>.</returns>
        </member>
        <member name="M:OpenTelemetry.Resources.ResourceBuilder.CreateEmpty">
            <summary>
            Creates an empty <see cref="T:OpenTelemetry.Resources.ResourceBuilder"/> instance.
            </summary>
            <returns>Created <see cref="T:OpenTelemetry.Resources.ResourceBuilder"/>.</returns>
        </member>
        <member name="M:OpenTelemetry.Resources.ResourceBuilder.Clear">
            <summary>
            Clears the <see cref="T:OpenTelemetry.Resources.Resource"/>s added to the builder.
            </summary>
            <returns><see cref="T:OpenTelemetry.Resources.ResourceBuilder"/> for chaining.</returns>
        </member>
        <member name="M:OpenTelemetry.Resources.ResourceBuilder.Build">
            <summary>
            Build a merged <see cref="T:OpenTelemetry.Resources.Resource"/> from all the <see cref="T:OpenTelemetry.Resources.Resource"/>s added to the builder.
            </summary>
            <returns><see cref="T:OpenTelemetry.Resources.Resource"/>.</returns>
        </member>
        <member name="M:OpenTelemetry.Resources.ResourceBuilder.AddDetector(OpenTelemetry.Resources.IResourceDetector)">
            <summary>
            Add a <see cref="T:OpenTelemetry.Resources.IResourceDetector"/> to the builder.
            </summary>
            <param name="resourceDetector"><see cref="T:OpenTelemetry.Resources.IResourceDetector"/>.</param>
            <returns>Supplied <see cref="T:OpenTelemetry.Resources.ResourceBuilder"/> for call chaining.</returns>
        </member>
        <member name="M:OpenTelemetry.Resources.ResourceBuilder.AddDetector(System.Func{System.IServiceProvider,OpenTelemetry.Resources.IResourceDetector})">
            <summary>
            Add a <see cref="T:OpenTelemetry.Resources.IResourceDetector"/> to the builder which will be resolved using the application <see cref="T:System.IServiceProvider"/>.
            </summary>
            <remarks>
            Note: The supplied <paramref name="resourceDetectorFactory"/> may be
            called with a <see langword="null"/> <see cref="T:System.IServiceProvider"/>
            for detached <see cref="T:OpenTelemetry.Resources.ResourceBuilder"/> instances. Factories
            should either throw if a <see langword="null"/> cannot be handled,
            or return a default <see cref="T:OpenTelemetry.Resources.IResourceDetector"/> when <see
            cref="T:System.IServiceProvider"/> is not available.
            </remarks>
            <param name="resourceDetectorFactory">Resource detector factory.</param>
            <returns>Supplied <see cref="T:OpenTelemetry.Resources.ResourceBuilder"/> for call chaining.</returns>
        </member>
        <member name="T:OpenTelemetry.Resources.ResourceBuilderExtensions">
            <summary>
            Contains extension methods for building <see cref="T:OpenTelemetry.Resources.Resource"/>s.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Resources.ResourceBuilderExtensions.AddService(OpenTelemetry.Resources.ResourceBuilder,System.String,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Adds service information to a <see cref="T:OpenTelemetry.Resources.ResourceBuilder"/>
            following <a
            href="https://github.com/open-telemetry/opentelemetry-specification/tree/main/specification/resource/semantic_conventions#service">semantic
            conventions</a>.
            </summary>
            <param name="resourceBuilder"><see cref="T:OpenTelemetry.Resources.ResourceBuilder"/>.</param>
            <param name="serviceName">Name of the service.</param>
            <param name="serviceNamespace">Optional namespace of the service.</param>
            <param name="serviceVersion">Optional version of the service.</param>
            <param name="autoGenerateServiceInstanceId">Specify <see langword="true"/> to automatically generate a <see cref="T:System.Guid"/> for <paramref name="serviceInstanceId"/> if not supplied.</param>
            <param name="serviceInstanceId">Optional unique identifier of the service instance.</param>
            <returns>Returns <see cref="T:OpenTelemetry.Resources.ResourceBuilder"/> for chaining.</returns>
        </member>
        <member name="M:OpenTelemetry.Resources.ResourceBuilderExtensions.AddTelemetrySdk(OpenTelemetry.Resources.ResourceBuilder)">
            <summary>
            Adds service information to a <see cref="T:OpenTelemetry.Resources.ResourceBuilder"/>
            following <a
            href="https://github.com/open-telemetry/opentelemetry-specification/tree/main/specification/resource/semantic_conventions#telemetry-sdk">semantic
            conventions</a>.
            </summary>
            <param name="resourceBuilder"><see cref="T:OpenTelemetry.Resources.ResourceBuilder"/>.</param>
            <returns>Returns <see cref="T:OpenTelemetry.Resources.ResourceBuilder"/> for chaining.</returns>
        </member>
        <member name="M:OpenTelemetry.Resources.ResourceBuilderExtensions.AddAttributes(OpenTelemetry.Resources.ResourceBuilder,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Adds attributes to a <see cref="T:OpenTelemetry.Resources.ResourceBuilder"/>.
            </summary>
            <param name="resourceBuilder"><see cref="T:OpenTelemetry.Resources.ResourceBuilder"/>.</param>
            <param name="attributes">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of attributes that describe the resource.</param>
            <returns>Returns <see cref="T:OpenTelemetry.Resources.ResourceBuilder"/> for chaining.</returns>
        </member>
        <member name="M:OpenTelemetry.Resources.ResourceBuilderExtensions.AddEnvironmentVariableDetector(OpenTelemetry.Resources.ResourceBuilder)">
            <summary>
            Adds resource attributes parsed from OTEL_RESOURCE_ATTRIBUTES, OTEL_SERVICE_NAME environment variables
            to a <see cref="T:OpenTelemetry.Resources.ResourceBuilder"/> following the <a
            href="https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/resource/sdk.md#specifying-resource-information-via-an-environment-variable">Resource
            SDK</a>.
            </summary>
            <param name="resourceBuilder"><see cref="T:OpenTelemetry.Resources.ResourceBuilder"/>.</param>
            <returns>Returns <see cref="T:OpenTelemetry.Resources.ResourceBuilder"/> for chaining.</returns>
        </member>
        <member name="T:OpenTelemetry.BatchLogRecordExportProcessor">
            <summary>
            Implements a batch log record export processor.
            </summary>
        </member>
        <member name="M:OpenTelemetry.BatchLogRecordExportProcessor.#ctor(OpenTelemetry.BaseExporter{OpenTelemetry.Logs.LogRecord},System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenTelemetry.BatchLogRecordExportProcessor"/> class.
            </summary>
            <param name="exporter">Log record exporter.</param>
            <param name="maxQueueSize">The maximum queue size. After the size is reached data are dropped. The default value is 2048.</param>
            <param name="scheduledDelayMilliseconds">The delay interval in milliseconds between two consecutive exports. The default value is 5000.</param>
            <param name="exporterTimeoutMilliseconds">How long the export can run before it is cancelled. The default value is 30000.</param>
            <param name="maxExportBatchSize">The maximum batch size of every export. It must be smaller or equal to maxQueueSize. The default value is 512.</param>
        </member>
        <member name="M:OpenTelemetry.BatchLogRecordExportProcessor.OnEnd(OpenTelemetry.Logs.LogRecord)">
            <inheritdoc/>
        </member>
        <member name="T:OpenTelemetry.Logs.LogRecord">
            <summary>
            Stores details about a log message.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Logs.LogRecord.Timestamp">
            <summary>
            Gets or sets the log timestamp.
            </summary>
            <remarks>
            Note: If <see cref="P:OpenTelemetry.Logs.LogRecord.Timestamp"/> is set to a value with <see
            cref="F:System.DateTimeKind.Local"/> it will be automatically converted to
            UTC using <see cref="M:System.DateTime.ToUniversalTime"/>.
            </remarks>
        </member>
        <member name="P:OpenTelemetry.Logs.LogRecord.TraceId">
            <summary>
            Gets or sets the log <see cref="T:System.Diagnostics.ActivityTraceId"/>.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Logs.LogRecord.SpanId">
            <summary>
            Gets or sets the log <see cref="T:System.Diagnostics.ActivitySpanId"/>.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Logs.LogRecord.TraceFlags">
            <summary>
            Gets or sets the log <see cref="T:System.Diagnostics.ActivityTraceFlags"/>.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Logs.LogRecord.TraceState">
            <summary>
            Gets or sets the log trace state.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Logs.LogRecord.CategoryName">
            <summary>
            Gets or sets the log category name.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Logs.LogRecord.LogLevel">
            <summary>
            Gets or sets the log <see cref="T:Microsoft.Extensions.Logging.LogLevel"/>.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Logs.LogRecord.EventId">
            <summary>
            Gets or sets the log <see cref="T:Microsoft.Extensions.Logging.EventId"/>.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Logs.LogRecord.FormattedMessage">
            <summary>
            Gets or sets the log formatted message.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Logs.LogRecord.State">
            <summary>
            Gets or sets the raw state attached to the log. Set to <see
            langword="null"/> when <see
            cref="P:OpenTelemetry.Logs.OpenTelemetryLoggerOptions.ParseStateValues"/> is enabled.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Logs.LogRecord.StateValues">
            <summary>
            Gets or sets the parsed state values attached to the log. Set when <see
            cref="P:OpenTelemetry.Logs.OpenTelemetryLoggerOptions.ParseStateValues"/> is enabled
            otherwise <see langword="null"/>.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Logs.LogRecord.Exception">
            <summary>
            Gets or sets the log <see cref="T:System.Exception"/>.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Logs.LogRecord.ForEachScope``1(System.Action{OpenTelemetry.Logs.LogRecordScope,``0},``0)">
            <summary>
            Executes callback for each currently active scope objects in order
            of creation. All callbacks are guaranteed to be called inline from
            this method.
            </summary>
            <typeparam name="TState">State.</typeparam>
            <param name="callback">The callback to be executed for every scope object.</param>
            <param name="state">The state object to be passed into the callback.</param>
        </member>
        <member name="M:OpenTelemetry.Logs.LogRecord.GetDataRef">
            <summary>
            Gets a reference to the <see cref="T:OpenTelemetry.Logs.LogRecordData"/> for the log message.
            </summary>
            <returns><see cref="T:OpenTelemetry.Logs.LogRecordData"/>.</returns>
        </member>
        <member name="M:OpenTelemetry.Logs.LogRecord.BufferLogStateValues">
            <summary>
            Buffers the state values attached to the log into a list so that
            they can be safely processed after the log message lifecycle has
            ended.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Logs.LogRecord.BufferLogScopes">
            <summary>
            Buffers the scopes attached to the log into a list so that they can
            be safely processed after the log message lifecycle has ended.
            </summary>
        </member>
        <member name="T:OpenTelemetry.Logs.LogRecordAttributeList">
            <summary>
            Stores attributes to be added to a log message.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Logs.LogRecordAttributeList.Count">
            <inheritdoc/>
        </member>
        <member name="P:OpenTelemetry.Logs.LogRecordAttributeList.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:OpenTelemetry.Logs.LogRecordAttributeList.Item(System.String)">
            <summary>
            Add an attribute.
            </summary>
            <param name="key">Attribute name.</param>
            <returns>Attribute value.</returns>
        </member>
        <member name="M:OpenTelemetry.Logs.LogRecordAttributeList.CreateFromEnumerable(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Create a <see cref="T:OpenTelemetry.Logs.LogRecordAttributeList"/> collection from an enumerable.
            </summary>
            <param name="attributes">Source attributes.</param>
            <returns><see cref="T:OpenTelemetry.Logs.LogRecordAttributeList"/>.</returns>
        </member>
        <member name="M:OpenTelemetry.Logs.LogRecordAttributeList.Add(System.String,System.Object)">
            <summary>
            Add an attribute.
            </summary>
            <param name="key">Attribute name.</param>
            <param name="value">Attribute value.</param>
        </member>
        <member name="M:OpenTelemetry.Logs.LogRecordAttributeList.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Add an attribute.
            </summary>
            <param name="attribute">Attribute.</param>
        </member>
        <member name="M:OpenTelemetry.Logs.LogRecordAttributeList.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:OpenTelemetry.Logs.LogRecordAttributeList"/>.
            </summary>
            <returns><see cref="T:OpenTelemetry.Logs.LogRecordAttributeList.Enumerator"/>.</returns>
        </member>
        <member name="M:OpenTelemetry.Logs.LogRecordAttributeList.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.Logs.LogRecordAttributeList.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:OpenTelemetry.Logs.LogRecordAttributeList.Enumerator">
            <summary>
            Enumerates the elements of a <see cref="T:OpenTelemetry.Logs.LogRecordAttributeList"/>.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Logs.LogRecordAttributeList.Enumerator.Current">
            <inheritdoc/>
        </member>
        <member name="P:OpenTelemetry.Logs.LogRecordAttributeList.Enumerator.System#Collections#IEnumerator#Current">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.Logs.LogRecordAttributeList.Enumerator.MoveNext">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.Logs.LogRecordAttributeList.Enumerator.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.Logs.LogRecordAttributeList.Enumerator.System#Collections#IEnumerator#Reset">
            <inheritdoc/>
        </member>
        <member name="T:OpenTelemetry.Logs.LogRecordData">
            <summary>
            Stores details about a log message.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Logs.LogRecordData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OpenTelemetry.Logs.LogRecordData"/> struct.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Logs.LogRecordData.#ctor(System.Diagnostics.Activity)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenTelemetry.Logs.LogRecordData"/> struct.
            </summary>
            <remarks>
            Note: The <see cref="P:OpenTelemetry.Logs.LogRecordData.Timestamp"/> property is initialized to <see
            cref="P:System.DateTime.UtcNow"/> automatically.
            </remarks>
            <param name="activity">Optional <see cref="T:System.Diagnostics.Activity"/> used to populate context fields.</param>
        </member>
        <member name="P:OpenTelemetry.Logs.LogRecordData.Timestamp">
            <summary>
            Gets or sets the log timestamp.
            </summary>
            <remarks>
            Note: If <see cref="P:OpenTelemetry.Logs.LogRecordData.Timestamp"/> is set to a value with <see
            cref="F:System.DateTimeKind.Local"/> it will be automatically converted to
            UTC using <see cref="M:System.DateTime.ToUniversalTime"/>.
            </remarks>
        </member>
        <member name="P:OpenTelemetry.Logs.LogRecordData.TraceId">
            <summary>
            Gets or sets the log <see cref="T:System.Diagnostics.ActivityTraceId"/>.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Logs.LogRecordData.SpanId">
            <summary>
            Gets or sets the log <see cref="T:System.Diagnostics.ActivitySpanId"/>.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Logs.LogRecordData.TraceFlags">
            <summary>
            Gets or sets the log <see cref="T:System.Diagnostics.ActivityTraceFlags"/>.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Logs.LogRecordData.TraceState">
            <summary>
            Gets or sets the log trace state.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Logs.LogRecordData.CategoryName">
            <summary>
            Gets or sets the log category name.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Logs.LogRecordData.LogLevel">
            <summary>
            Gets or sets the log <see cref="T:Microsoft.Extensions.Logging.LogLevel"/>.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Logs.LogRecordData.EventId">
            <summary>
            Gets or sets the log <see cref="T:Microsoft.Extensions.Logging.EventId"/>.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Logs.LogRecordData.Message">
            <summary>
            Gets or sets the log message.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Logs.LogRecordData.Exception">
            <summary>
            Gets or sets the log <see cref="T:System.Exception"/>.
            </summary>
        </member>
        <member name="T:OpenTelemetry.Logs.LogRecordScope">
            <summary>
            Stores details about a scope attached to a log message.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Logs.LogRecordScope.Scope">
            <summary>
            Gets the raw scope value.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Logs.LogRecordScope.GetEnumerator">
            <summary>
            Gets an <see cref="T:System.Collections.IEnumerator"/> for looping over the inner values
            of the scope.
            </summary>
            <returns><see cref="T:OpenTelemetry.Logs.LogRecordScope.Enumerator"/>.</returns>
        </member>
        <member name="T:OpenTelemetry.Logs.LogRecordScope.Enumerator">
            <summary>
            LogRecordScope enumerator.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Logs.LogRecordScope.Enumerator.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenTelemetry.Logs.LogRecordScope.Enumerator"/> struct.
            </summary>
            <param name="scope">Scope.</param>
        </member>
        <member name="P:OpenTelemetry.Logs.LogRecordScope.Enumerator.Current">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.Logs.LogRecordScope.Enumerator.MoveNext">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.Logs.LogRecordScope.Enumerator.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.Logs.LogRecordScope.Enumerator.Reset">
            <inheritdoc/>
        </member>
        <member name="T:OpenTelemetry.Logs.OpenTelemetryLoggerProvider">
            <summary>
            An <see cref="T:Microsoft.Extensions.Logging.ILoggerProvider"/> implementation for exporting logs using OpenTelemetry.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Logs.OpenTelemetryLoggerProvider.#ctor(Microsoft.Extensions.Options.IOptionsMonitor{OpenTelemetry.Logs.OpenTelemetryLoggerOptions})">
            <summary>
            Initializes a new instance of the <see cref="T:OpenTelemetry.Logs.OpenTelemetryLoggerProvider"/> class.
            </summary>
            <param name="options"><see cref="T:OpenTelemetry.Logs.OpenTelemetryLoggerOptions"/>.</param>
        </member>
        <member name="M:OpenTelemetry.Logs.OpenTelemetryLoggerProvider.Microsoft#Extensions#Logging#ISupportExternalScope#SetScopeProvider(Microsoft.Extensions.Logging.IExternalScopeProvider)">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.Logs.OpenTelemetryLoggerProvider.CreateLogger(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.Logs.OpenTelemetryLoggerProvider.ForceFlush(System.Int32)">
            <summary>
            Flushes all the processors registered under <see
            cref="T:OpenTelemetry.Logs.OpenTelemetryLoggerProvider"/>, blocks the current thread
            until flush completed, shutdown signaled or timed out.
            </summary>
            <param name="timeoutMilliseconds">
            The number (non-negative) of milliseconds to wait, or
            <c>Timeout.Infinite</c> to wait indefinitely.
            </param>
            <returns>
            Returns <c>true</c> when force flush succeeded; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the <c>timeoutMilliseconds</c> is smaller than -1.
            </exception>
            <remarks>
            This function guarantees thread-safety.
            </remarks>
        </member>
        <member name="M:OpenTelemetry.Logs.OpenTelemetryLoggerProvider.AddProcessor(OpenTelemetry.BaseProcessor{OpenTelemetry.Logs.LogRecord})">
            <summary>
            Add a processor to the <see cref="T:OpenTelemetry.Logs.OpenTelemetryLoggerProvider"/>.
            </summary>
            <remarks>
            Note: The supplied <paramref name="processor"/> will be
            automatically disposed when then the <see
            cref="T:OpenTelemetry.Logs.OpenTelemetryLoggerProvider"/> is disposed.
            </remarks>
            <param name="processor">Log processor to add.</param>
            <returns>The supplied <see cref="T:OpenTelemetry.Logs.OpenTelemetryLoggerOptions"/> for chaining.</returns>
        </member>
        <member name="M:OpenTelemetry.Logs.OpenTelemetryLoggerProvider.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:OpenTelemetry.Logs.OpenTelemetryLoggerOptions">
            <summary>
            Contains OpenTelemetry logging options.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Logs.OpenTelemetryLoggerOptions.IncludeScopes">
            <summary>
            Gets or sets a value indicating whether or not log scopes should be
            included on generated <see cref="T:OpenTelemetry.Logs.LogRecord"/>s. Default value:
            False.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Logs.OpenTelemetryLoggerOptions.IncludeFormattedMessage">
            <summary>
            Gets or sets a value indicating whether or not formatted log message
            should be included on generated <see cref="T:OpenTelemetry.Logs.LogRecord"/>s. Default
            value: False.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Logs.OpenTelemetryLoggerOptions.ParseStateValues">
            <summary>
            Gets or sets a value indicating whether or not log state should be
            parsed into <see cref="P:OpenTelemetry.Logs.LogRecord.StateValues"/> on generated <see
            cref="T:OpenTelemetry.Logs.LogRecord"/>s. Default value: False.
            </summary>
            <remarks>
            Note: When <see cref="P:OpenTelemetry.Logs.OpenTelemetryLoggerOptions.ParseStateValues"/> is set to <see
            langword="true"/> <see cref="P:OpenTelemetry.Logs.LogRecord.State"/> will always be <see
            langword="null"/>.
            </remarks>
        </member>
        <member name="M:OpenTelemetry.Logs.OpenTelemetryLoggerOptions.AddProcessor(OpenTelemetry.BaseProcessor{OpenTelemetry.Logs.LogRecord})">
            <summary>
            Adds processor to the options.
            </summary>
            <param name="processor">Log processor to add.</param>
            <returns>Returns <see cref="T:OpenTelemetry.Logs.OpenTelemetryLoggerOptions"/> for chaining.</returns>
        </member>
        <member name="M:OpenTelemetry.Logs.OpenTelemetryLoggerOptions.SetResourceBuilder(OpenTelemetry.Resources.ResourceBuilder)">
            <summary>
            Sets the <see cref="F:OpenTelemetry.Logs.OpenTelemetryLoggerOptions.ResourceBuilder"/> from which the Resource associated with
            this provider is built from. Overwrites currently set ResourceBuilder.
            </summary>
            <param name="resourceBuilder"><see cref="F:OpenTelemetry.Logs.OpenTelemetryLoggerOptions.ResourceBuilder"/> from which Resource will be built.</param>
            <returns>Returns <see cref="T:OpenTelemetry.Logs.OpenTelemetryLoggerOptions"/> for chaining.</returns>
        </member>
        <member name="T:OpenTelemetry.SimpleLogRecordExportProcessor">
            <summary>
            Implements a simple log record export processor.
            </summary>
        </member>
        <member name="M:OpenTelemetry.SimpleLogRecordExportProcessor.#ctor(OpenTelemetry.BaseExporter{OpenTelemetry.Logs.LogRecord})">
            <summary>
            Initializes a new instance of the <see cref="T:OpenTelemetry.SimpleLogRecordExportProcessor"/> class.
            </summary>
            <param name="exporter">Log record exporter.</param>
        </member>
        <member name="T:OpenTelemetry.OpenTelemetryBuilder">
            <summary>
            Contains methods for configuring the OpenTelemetry SDK inside an <see
            cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.
            </summary>
        </member>
        <member name="P:OpenTelemetry.OpenTelemetryBuilder.Services">
            <summary>
            Gets the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> behind the builder.
            </summary>
        </member>
        <member name="M:OpenTelemetry.OpenTelemetryBuilder.ConfigureResource(System.Action{OpenTelemetry.Resources.ResourceBuilder})">
            <summary>
            Registers an action to configure the <see cref="T:OpenTelemetry.Resources.ResourceBuilder"/>s used
            by tracing and metrics.
            </summary>
            <remarks>
            Note: This is safe to be called multiple times and by library authors.
            Each registered configuration action will be applied sequentially.
            </remarks>
            <param name="configure"><see cref="T:OpenTelemetry.Resources.ResourceBuilder"/> configuration
            action.</param>
            <returns>The supplied <see cref="T:OpenTelemetry.OpenTelemetryBuilder"/> for chaining
            calls.</returns>
        </member>
        <member name="M:OpenTelemetry.OpenTelemetryBuilder.WithMetrics">
            <summary>
            Adds metric services into the builder.
            </summary>
            <remarks>
            Notes:
            <list type="bullet">
            <item>A <see cref="T:OpenTelemetry.Metrics.MeterProvider"/> will not be created automatically
            using this method. To begin collecting metrics either use the
            <c>OpenTelemetryBuilder.StartWithHost</c> extension in the
            <c>OpenTelemetry.Extensions.Hosting</c> package or access the <see
            cref="T:OpenTelemetry.Metrics.MeterProvider"/> through the application <see
            cref="T:System.IServiceProvider"/>.</item>
            <item>This is safe to be called multiple times and by library authors.
            Only a single <see cref="T:OpenTelemetry.Metrics.MeterProvider"/> will be created for a given
            <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.</item>
            </list>
            </remarks>
            <returns>The supplied <see cref="T:OpenTelemetry.OpenTelemetryBuilder"/> for chaining
            calls.</returns>
        </member>
        <member name="M:OpenTelemetry.OpenTelemetryBuilder.WithMetrics(System.Action{OpenTelemetry.Metrics.MeterProviderBuilder})">
            <summary>
            Adds metric services into the builder.
            </summary>
            <remarks><inheritdoc cref="M:OpenTelemetry.OpenTelemetryBuilder.WithMetrics" path="/remarks"/></remarks>
            <param name="configure"><see cref="T:OpenTelemetry.Metrics.MeterProviderBuilder"/>
            configuration callback.</param>
            <returns>The supplied <see cref="T:OpenTelemetry.OpenTelemetryBuilder"/> for chaining
            calls.</returns>
        </member>
        <member name="M:OpenTelemetry.OpenTelemetryBuilder.WithTracing">
            <summary>
            Adds tracing services into the builder.
            </summary>
            <remarks>
            Notes:
            <list type="bullet">
            <item>A <see cref="T:OpenTelemetry.Trace.TracerProvider"/> will not be created automatically
            using this method. To begin collecting traces either use the
            <c>OpenTelemetryBuilder.StartWithHost</c> extension in the
            <c>OpenTelemetry.Extensions.Hosting</c> package or access the <see
            cref="T:OpenTelemetry.Trace.TracerProvider"/> through the application <see
            cref="T:System.IServiceProvider"/>.</item>
            <item>This is safe to be called multiple times and by library authors.
            Only a single <see cref="T:OpenTelemetry.Trace.TracerProvider"/> will be created for a given
            <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.</item>
            </list>
            </remarks>
            <returns>The supplied <see cref="T:OpenTelemetry.OpenTelemetryBuilder"/> for chaining
            calls.</returns>
        </member>
        <member name="M:OpenTelemetry.OpenTelemetryBuilder.WithTracing(System.Action{OpenTelemetry.Trace.TracerProviderBuilder})">
            <summary>
            Adds tracing services into the builder.
            </summary>
            <remarks><inheritdoc cref="M:OpenTelemetry.OpenTelemetryBuilder.WithTracing" path="/remarks"/></remarks>
            <param name="configure"><see cref="T:OpenTelemetry.Trace.TracerProviderBuilder"/>
            configuration callback.</param>
            <returns>The supplied <see cref="T:OpenTelemetry.OpenTelemetryBuilder"/> for chaining
            calls.</returns>
        </member>
        <member name="T:OpenTelemetry.OpenTelemetryServiceCollectionExtensions">
            <summary>
            Contains <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> extension methods for registering OpenTelemetry SDK artifacts.
            </summary>
        </member>
        <member name="M:OpenTelemetry.OpenTelemetryServiceCollectionExtensions.AddOpenTelemetry(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds OpenTelemetry SDK services into the supplied <see
            cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.
            </summary>
            <remarks>
            Notes:
            <list type="bullet">
            <item>A <see cref="T:OpenTelemetry.Trace.TracerProvider"/> and/or <see cref="T:OpenTelemetry.Metrics.MeterProvider"/>
            will not be created automatically using this method. To begin collecting
            traces and/or metrics either use the
            <c>OpenTelemetryBuilder.StartWithHost</c> extension in the
            <c>OpenTelemetry.Extensions.Hosting</c> package or access the <see
            cref="T:OpenTelemetry.Trace.TracerProvider"/> and/or <see cref="T:OpenTelemetry.Metrics.MeterProvider"/> through the
            application <see cref="T:System.IServiceProvider"/>.</item>
            <item>This is safe to be called multiple times and by library authors.
            Only a single <see cref="T:OpenTelemetry.Trace.TracerProvider"/> and/or <see
            cref="T:OpenTelemetry.Metrics.MeterProvider"/> will be created for a given <see
            cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.</item>
            </list>
            </remarks>
            <param name="services"><see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.</param>
            <returns>The supplied <see cref="T:OpenTelemetry.OpenTelemetryBuilder"/> for chaining
            calls.</returns>
        </member>
        <member name="T:OpenTelemetry.ProviderExtensions">
            <summary>
            Contains provider extension methods.
            </summary>
        </member>
        <member name="M:OpenTelemetry.ProviderExtensions.GetResource(OpenTelemetry.BaseProvider)">
            <summary>
            Gets the <see cref="T:OpenTelemetry.Resources.Resource"/> associated with the <see cref="T:OpenTelemetry.BaseProvider"/>.
            </summary>
            <param name="baseProvider"><see cref="T:OpenTelemetry.BaseProvider"/>.</param>
            <returns><see cref="T:OpenTelemetry.Resources.Resource"/>if found otherwise <see cref="P:OpenTelemetry.Resources.Resource.Empty"/>.</returns>
        </member>
        <member name="M:OpenTelemetry.ProviderExtensions.GetDefaultResource(OpenTelemetry.BaseProvider)">
            <summary>
            Gets the <see cref="T:OpenTelemetry.Resources.Resource"/> associated with the <see cref="T:OpenTelemetry.BaseProvider"/>.
            </summary>
            <param name="baseProvider"><see cref="T:OpenTelemetry.BaseProvider"/>.</param>
            <returns><see cref="T:OpenTelemetry.Resources.Resource"/>if found otherwise <see cref="P:OpenTelemetry.Resources.Resource.Empty"/>.</returns>
        </member>
        <member name="T:OpenTelemetry.ReadOnlyTagCollection">
            <summary>
            A read-only collection of tag key/value pairs.
            </summary>
        </member>
        <member name="P:OpenTelemetry.ReadOnlyTagCollection.Count">
            <summary>
            Gets the number of tags in the collection.
            </summary>
        </member>
        <member name="M:OpenTelemetry.ReadOnlyTagCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the tags.
            </summary>
            <returns><see cref="T:OpenTelemetry.ReadOnlyTagCollection.Enumerator"/>.</returns>
        </member>
        <member name="T:OpenTelemetry.ReadOnlyTagCollection.Enumerator">
            <summary>
            Enumerates the elements of a <see cref="T:OpenTelemetry.ReadOnlyTagCollection"/>.
            </summary>
        </member>
        <member name="P:OpenTelemetry.ReadOnlyTagCollection.Enumerator.Current">
            <summary>
            Gets the tag at the current position of the enumerator.
            </summary>
        </member>
        <member name="M:OpenTelemetry.ReadOnlyTagCollection.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the <see
            cref="T:OpenTelemetry.ReadOnlyTagCollection"/>.
            </summary>
            <returns><see langword="true"/> if the enumerator was
            successfully advanced to the next element; <see
            langword="false"/> if the enumerator has passed the end of the
            collection.</returns>
        </member>
        <member name="T:OpenTelemetry.Sdk">
            <summary>
            OpenTelemetry helper.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Sdk.SuppressInstrumentation">
            <summary>
            Gets a value indicating whether instrumentation is suppressed (disabled).
            </summary>
        </member>
        <member name="M:OpenTelemetry.Sdk.SetDefaultTextMapPropagator(OpenTelemetry.Context.Propagation.TextMapPropagator)">
            <summary>
            Sets the Default TextMapPropagator.
            </summary>
            <param name="textMapPropagator">TextMapPropagator to be set as default.</param>
        </member>
        <member name="M:OpenTelemetry.Sdk.CreateMeterProviderBuilder">
            <summary>
            Creates a <see cref="T:OpenTelemetry.Metrics.MeterProviderBuilder"/> which is used to build
            a <see cref="T:OpenTelemetry.Metrics.MeterProvider"/>. In a typical application, a single
            <see cref="T:OpenTelemetry.Metrics.MeterProvider"/> is created at application startup and disposed
            at application shutdown. It is important to ensure that the provider is not
            disposed too early.
            </summary>
            <returns><see cref="T:OpenTelemetry.Metrics.MeterProviderBuilder"/> instance, which is used to build a <see cref="T:OpenTelemetry.Metrics.MeterProvider"/>.</returns>
        </member>
        <member name="M:OpenTelemetry.Sdk.CreateTracerProviderBuilder">
            <summary>
            Creates a <see cref="T:OpenTelemetry.Trace.TracerProviderBuilder"/> which is used to build
            a <see cref="T:OpenTelemetry.Trace.TracerProvider"/>. In a typical application, a single
            <see cref="T:OpenTelemetry.Trace.TracerProvider"/> is created at application startup and disposed
            at application shutdown. It is important to ensure that the provider is not
            disposed too early.
            </summary>
            <returns><see cref="T:OpenTelemetry.Trace.TracerProviderBuilder"/> instance, which is used to build a <see cref="T:OpenTelemetry.Trace.TracerProvider"/>.</returns>
        </member>
        <member name="T:OpenTelemetry.SimpleExportProcessor`1">
            <summary>
            Implements processor that exports telemetry data at each OnEnd call.
            </summary>
            <typeparam name="T">The type of telemetry object to be exported.</typeparam>
        </member>
        <member name="M:OpenTelemetry.SimpleExportProcessor`1.#ctor(OpenTelemetry.BaseExporter{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:OpenTelemetry.SimpleExportProcessor`1"/> class.
            </summary>
            <param name="exporter">Exporter instance.</param>
        </member>
        <member name="M:OpenTelemetry.SimpleExportProcessor`1.OnExport(`0)">
            <inheritdoc />
        </member>
        <member name="M:OpenTelemetry.SuppressInstrumentationScope.Begin(System.Boolean)">
             <summary>
             Begins a new scope in which instrumentation is suppressed (disabled).
             </summary>
             <param name="value">Value indicating whether to suppress instrumentation.</param>
             <returns>Object to dispose to end the scope.</returns>
             <remarks>
             This is typically used to prevent infinite loops created by
             collection of internal operations, such as exporting traces over HTTP.
             <code>
                 public override async Task&lt;ExportResult&gt; ExportAsync(
                     IEnumerable&lt;Activity&gt; batch,
                     CancellationToken cancellationToken)
                 {
                     using (SuppressInstrumentationScope.Begin())
                     {
                         // Instrumentation is suppressed (i.e., Sdk.SuppressInstrumentation == true)
                     }
            
                     // Instrumentation is not suppressed (i.e., Sdk.SuppressInstrumentation == false)
                 }
             </code>
             </remarks>
        </member>
        <member name="M:OpenTelemetry.SuppressInstrumentationScope.Enter">
            <summary>
            Enters suppression mode.
            If suppression mode is enabled (slot is a negative integer), do nothing.
            If suppression mode is not enabled (slot is zero), enter reference-counting suppression mode.
            If suppression mode is enabled (slot is a positive integer), increment the ref count.
            </summary>
            <returns>The updated suppression slot value.</returns>
        </member>
        <member name="M:OpenTelemetry.SuppressInstrumentationScope.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:OpenTelemetry.Trace.AlwaysOffSampler">
            <summary>
            Sampler implementation which always returns <c>SamplingDecision.Drop</c>.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Trace.AlwaysOffSampler.ShouldSample(OpenTelemetry.Trace.SamplingParameters@)">
            <inheritdoc />
        </member>
        <member name="T:OpenTelemetry.Trace.AlwaysOnSampler">
            <summary>
            Sampler implementation which always returns <c>SamplingDecision.RecordAndSample</c>.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Trace.AlwaysOnSampler.ShouldSample(OpenTelemetry.Trace.SamplingParameters@)">
            <inheritdoc />
        </member>
        <member name="T:OpenTelemetry.Trace.BatchExportActivityProcessorOptions">
            <summary>
            Batch span processor options.
            OTEL_BSP_MAX_QUEUE_SIZE, OTEL_BSP_MAX_EXPORT_BATCH_SIZE, OTEL_BSP_EXPORT_TIMEOUT, OTEL_BSP_SCHEDULE_DELAY
            environment variables are parsed during object construction.
            </summary>
            <remarks>
            The constructor throws <see cref="T:System.FormatException"/> if it fails to parse
            any of the supported environment variables.
            </remarks>
        </member>
        <member name="M:OpenTelemetry.Trace.BatchExportActivityProcessorOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OpenTelemetry.Trace.BatchExportActivityProcessorOptions"/> class.
            </summary>
        </member>
        <member name="T:OpenTelemetry.Trace.TracerProviderBuilderBase">
            <summary>
            Contains methods for building <see cref="T:OpenTelemetry.Trace.TracerProvider"/> instances.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Trace.TracerProviderBuilderBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OpenTelemetry.Trace.TracerProviderBuilderBase"/> class.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Trace.TracerProviderBuilderBase.OpenTelemetry#Trace#ITracerProviderBuilder#Provider">
            <inheritdoc />
        </member>
        <member name="M:OpenTelemetry.Trace.TracerProviderBuilderBase.AddInstrumentation``1(System.Func{``0})">
            <inheritdoc />
        </member>
        <member name="M:OpenTelemetry.Trace.TracerProviderBuilderBase.AddSource(System.String[])">
            <inheritdoc />
        </member>
        <member name="M:OpenTelemetry.Trace.TracerProviderBuilderBase.AddLegacySource(System.String)">
            <inheritdoc />
        </member>
        <member name="M:OpenTelemetry.Trace.TracerProviderBuilderBase.OpenTelemetry#Trace#ITracerProviderBuilder#ConfigureServices(System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection})">
            <inheritdoc />
        </member>
        <member name="M:OpenTelemetry.Trace.TracerProviderBuilderBase.OpenTelemetry#Trace#ITracerProviderBuilder#ConfigureBuilder(System.Action{System.IServiceProvider,OpenTelemetry.Trace.TracerProviderBuilder})">
            <inheritdoc />
        </member>
        <member name="M:OpenTelemetry.Trace.TracerProviderBuilderBase.OpenTelemetry#Trace#IDeferredTracerProviderBuilder#Configure(System.Action{System.IServiceProvider,OpenTelemetry.Trace.TracerProviderBuilder})">
            <inheritdoc />
        </member>
        <member name="M:OpenTelemetry.Trace.TracerProviderBuilderBase.AddInstrumentation(System.String,System.String,System.Func{System.Object})">
            <summary>
            Adds instrumentation to the provider.
            </summary>d
            <param name="instrumentationName">Instrumentation name.</param>
            <param name="instrumentationVersion">Instrumentation version.</param>
            <param name="instrumentationFactory">Function that builds instrumentation.</param>
            <returns>Returns <see cref="T:OpenTelemetry.Trace.TracerProviderBuilder"/> for chaining.</returns>
        </member>
        <member name="M:OpenTelemetry.Trace.TracerProviderBuilderBase.Build">
            <summary>
            Run the configured actions to initialize the <see cref="T:OpenTelemetry.Trace.TracerProvider"/>.
            </summary>
            <returns><see cref="T:OpenTelemetry.Trace.TracerProvider"/>.</returns>
        </member>
        <member name="T:OpenTelemetry.Trace.TracerProviderBuilderExtensions">
            <summary>
            Contains extension methods for the <see cref="T:OpenTelemetry.Trace.TracerProviderBuilder"/> class.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Trace.TracerProviderBuilderExtensions.SetErrorStatusOnException(OpenTelemetry.Trace.TracerProviderBuilder,System.Boolean)">
            <summary>
            Sets whether the status of <see cref="T:System.Diagnostics.Activity"/>
            should be set to <c>Status.Error</c> when it ended abnormally due to an unhandled exception.
            </summary>
            <param name="tracerProviderBuilder"><see cref="T:OpenTelemetry.Trace.TracerProviderBuilder"/>.</param>
            <param name="enabled">Enabled or not. Default value is <c>true</c>.</param>
            <returns>Returns <see cref="T:OpenTelemetry.Trace.TracerProviderBuilder"/> for chaining.</returns>
        </member>
        <member name="M:OpenTelemetry.Trace.TracerProviderBuilderExtensions.SetSampler(OpenTelemetry.Trace.TracerProviderBuilder,OpenTelemetry.Trace.Sampler)">
            <summary>
            Sets sampler.
            </summary>
            <param name="tracerProviderBuilder"><see cref="T:OpenTelemetry.Trace.TracerProviderBuilder"/>.</param>
            <param name="sampler">Sampler instance.</param>
            <returns>Returns <see cref="T:OpenTelemetry.Trace.TracerProviderBuilder"/> for chaining.</returns>
        </member>
        <member name="M:OpenTelemetry.Trace.TracerProviderBuilderExtensions.SetSampler``1(OpenTelemetry.Trace.TracerProviderBuilder)">
            <summary>
            Sets the sampler on the provider.
            </summary>
            <remarks>
            Note: The type specified by <typeparamref name="T"/> will be
            registered as a singleton service into application services.
            </remarks>
            <typeparam name="T">Sampler type.</typeparam>
            <param name="tracerProviderBuilder"><see cref="T:OpenTelemetry.Trace.TracerProviderBuilder"/>.</param>
            <returns>The supplied <see cref="T:OpenTelemetry.Trace.TracerProviderBuilder"/> for chaining.</returns>
        </member>
        <member name="M:OpenTelemetry.Trace.TracerProviderBuilderExtensions.SetResourceBuilder(OpenTelemetry.Trace.TracerProviderBuilder,OpenTelemetry.Resources.ResourceBuilder)">
            <summary>
            Sets the <see cref="T:OpenTelemetry.Resources.ResourceBuilder"/> from which the Resource associated with
            this provider is built from. Overwrites currently set ResourceBuilder.
            You should usually use <see cref="M:OpenTelemetry.Trace.TracerProviderBuilderExtensions.ConfigureResource(OpenTelemetry.Trace.TracerProviderBuilder,System.Action{OpenTelemetry.Resources.ResourceBuilder})"/> instead
            (call <see cref="M:OpenTelemetry.Resources.ResourceBuilder.Clear"/> if desired).
            </summary>
            <param name="tracerProviderBuilder"><see cref="T:OpenTelemetry.Trace.TracerProviderBuilder"/>.</param>
            <param name="resourceBuilder"><see cref="T:OpenTelemetry.Resources.ResourceBuilder"/> from which Resource will be built.</param>
            <returns>Returns <see cref="T:OpenTelemetry.Trace.TracerProviderBuilder"/> for chaining.</returns>
        </member>
        <member name="M:OpenTelemetry.Trace.TracerProviderBuilderExtensions.ConfigureResource(OpenTelemetry.Trace.TracerProviderBuilder,System.Action{OpenTelemetry.Resources.ResourceBuilder})">
            <summary>
            Modify the <see cref="T:OpenTelemetry.Resources.ResourceBuilder"/> from which the Resource associated with
            this provider is built from in-place.
            </summary>
            <param name="tracerProviderBuilder"><see cref="T:OpenTelemetry.Trace.TracerProviderBuilder"/>.</param>
            <param name="configure">An action which modifies the provided <see cref="T:OpenTelemetry.Resources.ResourceBuilder"/> in-place.</param>
            <returns>Returns <see cref="T:OpenTelemetry.Trace.TracerProviderBuilder"/> for chaining.</returns>
        </member>
        <member name="M:OpenTelemetry.Trace.TracerProviderBuilderExtensions.AddProcessor(OpenTelemetry.Trace.TracerProviderBuilder,OpenTelemetry.BaseProcessor{System.Diagnostics.Activity})">
            <summary>
            Adds a processor to the provider.
            </summary>
            <param name="tracerProviderBuilder"><see cref="T:OpenTelemetry.Trace.TracerProviderBuilder"/>.</param>
            <param name="processor">Activity processor to add.</param>
            <returns>Returns <see cref="T:OpenTelemetry.Trace.TracerProviderBuilder"/> for chaining.</returns>
        </member>
        <member name="M:OpenTelemetry.Trace.TracerProviderBuilderExtensions.AddProcessor``1(OpenTelemetry.Trace.TracerProviderBuilder)">
            <summary>
            Adds a processor to the provider which will be retrieved using dependency injection.
            </summary>
            <remarks>
            Note: The type specified by <typeparamref name="T"/> will be
            registered as a singleton service into application services.
            </remarks>
            <typeparam name="T">Processor type.</typeparam>
            <param name="tracerProviderBuilder"><see cref="T:OpenTelemetry.Trace.TracerProviderBuilder"/>.</param>
            <returns>The supplied <see cref="T:OpenTelemetry.Trace.TracerProviderBuilder"/> for chaining.</returns>
        </member>
        <member name="M:OpenTelemetry.Trace.TracerProviderBuilderExtensions.Build(OpenTelemetry.Trace.TracerProviderBuilder)">
            <summary>
            Run the given actions to initialize the <see cref="T:OpenTelemetry.Trace.TracerProvider"/>.
            </summary>
            <param name="tracerProviderBuilder"><see cref="T:OpenTelemetry.Trace.TracerProviderBuilder"/>.</param>
            <returns><see cref="T:OpenTelemetry.Trace.TracerProvider"/>.</returns>
        </member>
        <member name="T:OpenTelemetry.Trace.TracerProviderBuilderSdk">
            <summary>
            Stores state used to build a <see cref="T:OpenTelemetry.Trace.TracerProvider"/>.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Trace.ExceptionProcessor.OnStart(System.Diagnostics.Activity)">
            <inheritdoc />
        </member>
        <member name="M:OpenTelemetry.Trace.ExceptionProcessor.OnEnd(System.Diagnostics.Activity)">
            <inheritdoc />
        </member>
        <member name="T:OpenTelemetry.Trace.ParentBasedSampler">
            <summary>
            Sampler implementation which by default will take a sample if parent Activity is sampled.
            Otherwise, samples root traces according to the specified root sampler.
            </summary>
            <remarks>
            The default behavior can be customized by providing additional samplers to be invoked for different
            combinations of local/remote parent and its sampling decision.
            See <see cref="M:OpenTelemetry.Trace.ParentBasedSampler.#ctor(OpenTelemetry.Trace.Sampler,OpenTelemetry.Trace.Sampler,OpenTelemetry.Trace.Sampler,OpenTelemetry.Trace.Sampler,OpenTelemetry.Trace.Sampler)"/>.
            </remarks>
        </member>
        <member name="M:OpenTelemetry.Trace.ParentBasedSampler.#ctor(OpenTelemetry.Trace.Sampler)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenTelemetry.Trace.ParentBasedSampler"/> class.
            </summary>
            <param name="rootSampler">The <see cref="T:OpenTelemetry.Trace.Sampler"/> to be called for root span/activity.</param>
        </member>
        <member name="M:OpenTelemetry.Trace.ParentBasedSampler.#ctor(OpenTelemetry.Trace.Sampler,OpenTelemetry.Trace.Sampler,OpenTelemetry.Trace.Sampler,OpenTelemetry.Trace.Sampler,OpenTelemetry.Trace.Sampler)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenTelemetry.Trace.ParentBasedSampler"/> class with ability to delegate
            sampling decision to one of the inner samplers provided.
            </summary>
            <param name="rootSampler">The <see cref="T:OpenTelemetry.Trace.Sampler"/> to be called for root span/activity.</param>
            <param name="remoteParentSampled">
            A <see cref="T:OpenTelemetry.Trace.Sampler"/> to delegate sampling decision to in case of
            remote parent (<see cref="P:System.Diagnostics.ActivityContext.IsRemote"/> == true) with <see cref="F:System.Diagnostics.ActivityTraceFlags.Recorded"/> flag == true.
            Default: <see cref="T:OpenTelemetry.Trace.AlwaysOnSampler"/>.
            </param>
            <param name="remoteParentNotSampled">
            A <see cref="T:OpenTelemetry.Trace.Sampler"/> to delegate sampling decision to in case of
            remote parent (<see cref="P:System.Diagnostics.ActivityContext.IsRemote"/> == true) with <see cref="F:System.Diagnostics.ActivityTraceFlags.Recorded"/> flag == false.
            Default: <see cref="T:OpenTelemetry.Trace.AlwaysOffSampler"/>.
            </param>
            <param name="localParentSampled">
            A <see cref="T:OpenTelemetry.Trace.Sampler"/> to delegate sampling decision to in case of
            local parent (<see cref="P:System.Diagnostics.ActivityContext.IsRemote"/> == false) with <see cref="F:System.Diagnostics.ActivityTraceFlags.Recorded"/> flag == true.
            Default: <see cref="T:OpenTelemetry.Trace.AlwaysOnSampler"/>.
            </param>
            <param name="localParentNotSampled">
            A <see cref="T:OpenTelemetry.Trace.Sampler"/> to delegate sampling decision to in case of
            local parent (<see cref="P:System.Diagnostics.ActivityContext.IsRemote"/> == false) with <see cref="F:System.Diagnostics.ActivityTraceFlags.Recorded"/> flag == false.
            Default: <see cref="T:OpenTelemetry.Trace.AlwaysOffSampler"/>.
            </param>
        </member>
        <member name="M:OpenTelemetry.Trace.ParentBasedSampler.ShouldSample(OpenTelemetry.Trace.SamplingParameters@)">
            <inheritdoc />
        </member>
        <member name="T:OpenTelemetry.Trace.Sampler">
            <summary>
            Controls the number of samples of traces collected and sent to the backend.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Trace.Sampler.Description">
            <summary>
            Gets or sets the sampler description.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Trace.Sampler.ShouldSample(OpenTelemetry.Trace.SamplingParameters@)">
            <summary>
            Checks whether activity needs to be created and tracked.
            </summary>
            <param name="samplingParameters">
            The <see cref="T:OpenTelemetry.Trace.SamplingParameters"/> used by the <see cref="T:OpenTelemetry.Trace.Sampler"/>
            to decide if the <see cref="T:System.Diagnostics.Activity"/> to be created is going to be sampled or not.
            </param>
            <returns>Sampling decision on whether activity needs to be sampled or not.</returns>
        </member>
        <member name="T:OpenTelemetry.Trace.SamplingDecision">
            <summary>
            Enumeration to define sampling decision.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Trace.SamplingDecision.Drop">
            <summary>
            The activity will be created but not recorded.
            Activity.IsAllDataRequested will return false.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Trace.SamplingDecision.RecordOnly">
            <summary>
            The activity will be created and recorded, but sampling flag will not be set.
            Activity.IsAllDataRequested will return true.
            Activity.Recorded will return false.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Trace.SamplingDecision.RecordAndSample">
            <summary>
            The activity will be created, recorded, and sampling flag will be set.
            Activity.IsAllDataRequested will return true.
            Activity.Recorded will return true.
            </summary>
        </member>
        <member name="T:OpenTelemetry.Trace.SamplingParameters">
            <summary>
            Sampling parameters passed to a <see cref="T:OpenTelemetry.Trace.Sampler"/> for it to make a sampling decision.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Trace.SamplingParameters.#ctor(System.Diagnostics.ActivityContext,System.Diagnostics.ActivityTraceId,System.String,System.Diagnostics.ActivityKind,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Collections.Generic.IEnumerable{System.Diagnostics.ActivityLink})">
            <summary>
            Initializes a new instance of the <see cref="T:OpenTelemetry.Trace.SamplingParameters"/> struct.
            </summary>
            <param name="parentContext">Parent activity context. Typically taken from the wire.</param>
            <param name="traceId">Trace ID of a activity to be created.</param>
            <param name="name">The name (DisplayName) of the activity to be created. Note, that the name of the activity is settable.
            So this name can be changed later and Sampler implementation should assume that.
            Typical example of a name change is when <see cref="T:System.Diagnostics.Activity"/> representing incoming http request
            has a name of url path and then being updated with route name when routing complete.
            </param>
            <param name="kind">The kind of the Activity to be created.</param>
            <param name="tags">Initial set of Tags for the Activity being constructed.</param>
            <param name="links">Links associated with the activity.</param>
        </member>
        <member name="P:OpenTelemetry.Trace.SamplingParameters.ParentContext">
            <summary>
            Gets the parent activity context.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Trace.SamplingParameters.TraceId">
            <summary>
            Gets the trace ID of parent activity or a new generated one for root span/activity.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Trace.SamplingParameters.Name">
            <summary>
            Gets the name to be given to the span/activity.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Trace.SamplingParameters.Kind">
            <summary>
            Gets the kind of span/activity to be created.
            </summary>
            <remarks>
            For Activities created outside of ActivitySource,
            the Kind will be the default (Internal).
            </remarks>
        </member>
        <member name="P:OpenTelemetry.Trace.SamplingParameters.Tags">
            <summary>
            Gets the tags to be associated to the span/activity to be created.
            These are the tags provided at the time of Activity creation.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Trace.SamplingParameters.Links">
            <summary>
            Gets the links to be added to the activity to be created.
            </summary>
        </member>
        <member name="T:OpenTelemetry.Trace.SamplingResult">
            <summary>
            Sampling result.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Trace.SamplingResult.#ctor(OpenTelemetry.Trace.SamplingDecision)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenTelemetry.Trace.SamplingResult"/> struct.
            </summary>
            <param name="decision"> indicates whether an activity object is recorded and sampled.</param>
        </member>
        <member name="M:OpenTelemetry.Trace.SamplingResult.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenTelemetry.Trace.SamplingResult"/> struct.
            </summary>
            <param name="isSampled"> True if sampled, false otherwise.</param>
        </member>
        <member name="M:OpenTelemetry.Trace.SamplingResult.#ctor(OpenTelemetry.Trace.SamplingDecision,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Initializes a new instance of the <see cref="T:OpenTelemetry.Trace.SamplingResult"/> struct.
            </summary>
            <param name="decision">indicates whether an activity object is recorded and sampled.</param>
            <param name="attributes">Attributes associated with the sampling decision. Attributes list passed to
            this method must be immutable. Mutations of the collection and/or attribute values may lead to unexpected behavior.</param>
        </member>
        <member name="M:OpenTelemetry.Trace.SamplingResult.#ctor(OpenTelemetry.Trace.SamplingDecision,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenTelemetry.Trace.SamplingResult"/> struct.
            </summary>
            <param name="decision">indicates whether an activity object is recorded and sampled.</param>
            <param name="traceStateString">traceStateString associated with the created Activity.</param>
        </member>
        <member name="M:OpenTelemetry.Trace.SamplingResult.#ctor(OpenTelemetry.Trace.SamplingDecision,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenTelemetry.Trace.SamplingResult"/> struct.
            </summary>
            <param name="decision">indicates whether an activity object is recorded and sampled.</param>
            <param name="attributes">attributes associated with the sampling decision. Attributes list passed to
            this method must be immutable. Mutations of the collection and/or attribute values may lead to unexpected behavior.</param>
            <param name="traceStateString">traceStateString associated with the created Activity.</param>
        </member>
        <member name="P:OpenTelemetry.Trace.SamplingResult.Decision">
            <summary>
            Gets a value indicating indicates whether an activity object is recorded and sampled.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Trace.SamplingResult.Attributes">
            <summary>
            Gets a map of attributes associated with the sampling decision.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Trace.SamplingResult.TraceStateString">
            <summary>
            Gets the tracestate.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Trace.SamplingResult.op_Equality(OpenTelemetry.Trace.SamplingResult,OpenTelemetry.Trace.SamplingResult)">
            <summary>
            Compare two <see cref="T:OpenTelemetry.Trace.SamplingResult"/> for equality.
            </summary>
            <param name="decision1">First Decision to compare.</param>
            <param name="decision2">Second Decision to compare.</param>
        </member>
        <member name="M:OpenTelemetry.Trace.SamplingResult.op_Inequality(OpenTelemetry.Trace.SamplingResult,OpenTelemetry.Trace.SamplingResult)">
            <summary>
            Compare two <see cref="T:OpenTelemetry.Trace.SamplingResult"/> for not equality.
            </summary>
            <param name="decision1">First Decision to compare.</param>
            <param name="decision2">Second Decision to compare.</param>
        </member>
        <member name="M:OpenTelemetry.Trace.SamplingResult.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.Trace.SamplingResult.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.Trace.SamplingResult.Equals(OpenTelemetry.Trace.SamplingResult)">
            <inheritdoc/>
        </member>
        <member name="T:OpenTelemetry.Trace.TraceIdRatioBasedSampler">
            <summary>
            Samples traces according to the specified probability.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Trace.TraceIdRatioBasedSampler.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenTelemetry.Trace.TraceIdRatioBasedSampler"/> class.
            </summary>
            <param name="probability">The desired probability of sampling. This must be between 0.0 and 1.0.
            Higher the value, higher is the probability of a given Activity to be sampled in.
            </param>
        </member>
        <member name="M:OpenTelemetry.Trace.TraceIdRatioBasedSampler.ShouldSample(OpenTelemetry.Trace.SamplingParameters@)">
            <inheritdoc />
        </member>
        <member name="T:OpenTelemetry.Trace.TracerProviderExtensions">
            <summary>
            Contains extension methods for the <see cref="T:OpenTelemetry.Trace.TracerProvider"/> class.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Trace.TracerProviderExtensions.AddProcessor(OpenTelemetry.Trace.TracerProvider,OpenTelemetry.BaseProcessor{System.Diagnostics.Activity})">
            <summary>
            Add a processor to the provider.
            </summary>
            <param name="provider"><see cref="T:OpenTelemetry.Trace.TracerProvider"/>.</param>
            <param name="processor"><see cref="T:OpenTelemetry.BaseProcessor`1"/>.</param>
            <returns>The supplied <see cref="T:OpenTelemetry.Trace.TracerProvider"/> instance for call chaining.</returns>
        </member>
        <member name="M:OpenTelemetry.Trace.TracerProviderExtensions.ForceFlush(OpenTelemetry.Trace.TracerProvider,System.Int32)">
            <summary>
            Flushes all the processors registered under TracerProviderSdk, blocks the current thread
            until flush completed, shutdown signaled or timed out.
            </summary>
            <param name="provider">TracerProviderSdk instance on which ForceFlush will be called.</param>
            <param name="timeoutMilliseconds">
            The number (non-negative) of milliseconds to wait, or
            <c>Timeout.Infinite</c> to wait indefinitely.
            </param>
            <returns>
            Returns <c>true</c> when force flush succeeded; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the <c>timeoutMilliseconds</c> is smaller than -1.
            </exception>
            <remarks>
            This function guarantees thread-safety.
            </remarks>
        </member>
        <member name="M:OpenTelemetry.Trace.TracerProviderExtensions.Shutdown(OpenTelemetry.Trace.TracerProvider,System.Int32)">
            <summary>
            Attempts to shutdown the TracerProviderSdk, blocks the current thread until
            shutdown completed or timed out.
            </summary>
            <param name="provider">TracerProviderSdk instance on which Shutdown will be called.</param>
            <param name="timeoutMilliseconds">
            The number (non-negative) of milliseconds to wait, or
            <c>Timeout.Infinite</c> to wait indefinitely.
            </param>
            <returns>
            Returns <c>true</c> when shutdown succeeded; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the <c>timeoutMilliseconds</c> is smaller than -1.
            </exception>
            <remarks>
            This function guarantees thread-safety. Only the first call will
            win, subsequent calls will be no-op.
            </remarks>
        </member>
        <member name="M:OpenTelemetry.Trace.TracerProviderSdk.OnShutdown(System.Int32)">
            <summary>
            Called by <c>Shutdown</c>. This function should block the current
            thread until shutdown completed or timed out.
            </summary>
            <param name="timeoutMilliseconds">
            The number (non-negative) of milliseconds to wait, or
            <c>Timeout.Infinite</c> to wait indefinitely.
            </param>
            <returns>
            Returns <c>true</c> when shutdown succeeded; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This function is called synchronously on the thread which made the
            first call to <c>Shutdown</c>. This function should not throw
            exceptions.
            </remarks>
        </member>
        <member name="M:OpenTelemetry.BatchActivityExportProcessor.OnEnd(System.Diagnostics.Activity)">
            <inheritdoc />
        </member>
        <member name="M:OpenTelemetry.SimpleActivityExportProcessor.OnEnd(System.Diagnostics.Activity)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.Extensions.Logging.OpenTelemetryLoggingExtensions">
            <summary>
            Contains extension methods for registering <see cref="T:OpenTelemetry.Logs.OpenTelemetryLoggerProvider"/> into a <see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder"/> instance.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Logging.OpenTelemetryLoggingExtensions.AddOpenTelemetry(Microsoft.Extensions.Logging.ILoggingBuilder)">
            <summary>
            Adds an OpenTelemetry logger named 'OpenTelemetry' to the <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/>.
            </summary>
            <remarks>
            Note: This is safe to be called multiple times and by library
            authors. Only a single <see cref="T:OpenTelemetry.Logs.OpenTelemetryLoggerProvider"/>
            will be created for a given <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.
            </remarks>
            <param name="builder">The <see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder"/> to use.</param>
            <returns>The supplied <see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder"/> for call chaining.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Logging.OpenTelemetryLoggingExtensions.AddOpenTelemetry(Microsoft.Extensions.Logging.ILoggingBuilder,System.Action{OpenTelemetry.Logs.OpenTelemetryLoggerOptions})">
            <summary>
            Adds an OpenTelemetry logger named 'OpenTelemetry' to the <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/>.
            </summary>
            <remarks><inheritdoc cref="M:Microsoft.Extensions.Logging.OpenTelemetryLoggingExtensions.AddOpenTelemetry(Microsoft.Extensions.Logging.ILoggingBuilder)" path="/remarks"/></remarks>
            <param name="builder">The <see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder"/> to use.</param>
            <param name="configure">Optional configuration action.</param>
            <returns>The supplied <see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder"/> for call chaining.</returns>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>Specifies that null is allowed as an input even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>Specifies that an output may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>, the parameter will not be null even if the corresponding type allows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
    </members>
</doc>
